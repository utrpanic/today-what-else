{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cocoa with Love",
    "home_page_url": "https://www.cocoawithlove.com/",
    "feed_url": "https://www.cocoawithlove.com/feed.json",
    "author": {
        "name": "Matt Gallagher"
    },
    "items": [
        
         {
            "title": "22 short tests of combine – Part 3: Asynchrony",
            "id": "https://www.cocoawithlove.com/blog/twenty-two-short-tests-of-combine-part-3.html",
            "url": "https://www.cocoawithlove.com/blog/twenty-two-short-tests-of-combine-part-3.html",
            "content_html": "\n\n\u003cp\u003eI wrote some experiments around Combine, Apple\u0026rsquo;s reactive programming framework, to gain insight into how Combine handles edge cases that have caused problems for me in other reactive programming frameworks.\u003c/p\u003e\n\n\u003cp\u003eLooking at everything in one article got much too long so I broke it into three parts:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-1.html\"\u003ere-implementing the core protocols of Combine\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-2.html\"\u003ea trio of topics: shared computation, shared reference lifetimes and sharing subscribers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003easynchrony, threading and performance\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis final part will look at asynchronous delivery scenarios. What happens in Combine when the next value arrives while the previous is being processed; in what ways is Combine thread-safe? Can values arrive out-of-order? Can delivered values overwhelm the subscriber I\u0026rsquo;ll finish up with a quick look at Combine\u0026rsquo;s performance.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDownload\u003c/strong\u003e: The code for this series, \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003eCombineExploration, is available on github\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: This is not a tutorial for Combine. I won\u0026rsquo;t be using Combine in anything resembling a conventional manner. This is going to be a look at some edge cases in Combine, testing behaviors that aren\u0026rsquo;t really documented and – since they are therefore \u0026ldquo;undocumented\u0026rdquo; – can\u0026rsquo;t be completely relied upon.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"asynchronous-problems\"\u003eAsynchronous problems\u003c/h2\u003e\n\n\u003cp\u003eAsynchronous problems are those that process events that occur over time. Most programming languages have no representation of time so we\u0026rsquo;re reliant on operating-system mediated trickery (blocking, threads and event queues) to let our programming languages handle asynchrony.\u003c/p\u003e\n\n\u003cp\u003eReactive programming offers abstractions over a number of different time-related operating system features but you can primarily treat reactive programming like an event queue, since the events passing through your pipelines will usually be triggered by events from an operating system event queue.\u003c/p\u003e\n\n\u003cp\u003eWhat are the problems that affect event queues?\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eevents which overwhelm their consumers\u003c/li\u003e\n\u003cli\u003econsumers which block other processing while waiting on events\u003c/li\u003e\n\u003cli\u003eevents on multiple threads triggering memory races\u003c/li\u003e\n\u003cli\u003eevents on multiple threads triggering logical races\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThese problems are what I\u0026rsquo;ll focus on in this article.\u003c/p\u003e\n\n\u003cp\u003eReactive programming generally takes a \u0026ldquo;non-blocking\u0026rdquo; approach to its API so I won\u0026rsquo;t consider point (2). While a \u0026ldquo;non-blocking\u0026rdquo; approach largely eliminates blocking as a source of problems, it means that rendezvous-based synchronization is not possible as a means of addressing point (1) (see Go\u0026rsquo;s CSP channels for an example of rendezvous-based synchronization).\u003c/p\u003e\n\n\u003ch2 id=\"supply-and-demand\"\u003eSupply and demand\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;m going to start by looking at how Combine handles events which overwhelm their consumers. It\u0026rsquo;s a weird place to start because Swift\u0026rsquo;s primary audience (iOS app developers) rarely ever encounter this problem. In front-end application development, the primary source of events is user-interaction and this event stream is usually slow compared to the application\u0026rsquo;s ability to process it. I\u0026rsquo;ve chosen this as a starting point though because Combine has a lot of quirks around its design to handle supply and demand scenarios. In this case, I consider a quirk to be a feature that\u0026rsquo;s more surprising and difficult to manage than it is helpful.\u003c/p\u003e\n\n\u003cp\u003eCombine uses a concept called \u0026ldquo;demand\u0026rdquo; (an implementation of what is elsewhere called \u0026ldquo;backpressure\u0026rdquo;) to determine how many values a downstream subscriber will accept. When an upstream event source generates more values than the subscriber will accept, Combine throws the values away.\u003c/p\u003e\n\n\u003cp\u003eIn the first part of this series, I implemented the following \u003ccode\u003ereceive\u003c/code\u003e function (a per-subscription function that passes values to the downstream \u003ccode\u003eSubscriber\u003c/code\u003e function with the same name) like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003edemand\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003enewDemand\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edownstream\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003edemand\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enewDemand\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edemand\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enewDemand\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003enone\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can see that if the current known downstream \u003ccode\u003edemand\u003c/code\u003e is zero, any received \u003ccode\u003einput\u003c/code\u003e is simply discarded. All subscriptions are expected to behave this way: if they don\u0026rsquo;t \u003cem\u003eknow\u003c/em\u003e that the downstream subscriber wants a value, they must discard it.\u003c/p\u003e\n\n\u003cp\u003eIn synchronous scenarios, it\u0026rsquo;s uncommon to see this causing a problem because most subscribers will immediately request \u003ccode\u003eDemand.unlimited\u003c/code\u003e. To see this happening in a controlled scenario, I\u0026rsquo;ve created a special \u003ccode\u003eSink\u003c/code\u003e implementation that allows a custom demand value and subsequent custom increases in demand.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomDemandSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003edemand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eincreaseDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e4.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eincreaseDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe initial demand is for 2 values (i.e. the \u003ccode\u003e1, 2\u003c/code\u003e in the received array). The \u003ccode\u003e3\u003c/code\u003e value sent in the first sequence exceeds that demand and is discarded. The demand is increased by 2, 3 more values are sent and again, the last value is discarded.\u003c/p\u003e\n\n\u003ch3 id=\"is-discarding-values-ever-a-good-idea\"\u003eIs discarding values ever a good idea?\u003c/h3\u003e\n\n\u003cp\u003eAs a quick look at demand shows: Combine handles inputs overwhelming consumers by discarding inputs. The problem here is that the discarding of data is not accompanied by an error response indicating \u0026ldquo;server/queue busy\u0026rdquo; or anything to that effect. It\u0026rsquo;s a silent failure.\u003c/p\u003e\n\n\u003cp\u003eThere are very few situations where throwing away data without some kind of special handling of the discarded data is a good idea. The two scenarios where it would make sense to me are when:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ewe want only the \u0026ldquo;most recent update\u0026rdquo; to be handled\u003c/li\u003e\n\u003cli\u003ewe can respond to the sender with a \u0026ldquo;server busy error\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf you carefully construct your Combine graph, you can handle the first scenario:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestDemandWithBuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomDemandSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003edemand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprefetch\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewhenFull\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edropOldest\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eincreaseDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e4.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eincreaseDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"aside\"\u003eBizarrely, as indicated by the \u003ccode\u003e.asEvents(completion: nil)\u003c/code\u003e at the end, the \u003ccode\u003ebuffer\u003c/code\u003e prevents errors being emitted when used with `.dropOldest` (which seems like a bug). The error is emitted when `.dropNewest` is used.\u003c/div\u003e\n\n\u003cp\u003eThe \u003ccode\u003ebuffer\u003c/code\u003e lets us ensure \u0026ldquo;scenario 1\u0026rdquo; (\u0026ldquo;most recent update\u0026rdquo;) is correctly handled.\u003c/p\u003e\n\n\u003cp\u003eHowever, \u0026ldquo;scenario 2\u0026rdquo; (responding with a \u0026ldquo;server busy error\u0026rdquo;) is much harder. Yes, \u003ccode\u003ebuffer\u003c/code\u003e supports a \u003ccode\u003e.customError\u003c/code\u003e case for the \u003ccode\u003ewhenFull\u003c/code\u003e parameter but that causes the entire pipeline (the \u0026ldquo;server\u0026rdquo;) to fail, rather than the request. Sending errors to the upstream requester would require giving every value in the input a sequence number and triggering a side-effect when values in the sequence are omitted – a careful task that you\u0026rsquo;d need to manually handle.\u003c/p\u003e\n\n\u003cp\u003eIn summary, discarding values due to supply exceeding demand can work but you need to carefully build your reactive pipeline appropriately. It\u0026rsquo;s far more likely that you want to build pipelines that, by design, will \u003cem\u003enever\u003c/em\u003e discard values.\u003c/p\u003e\n\n\u003ch3 id=\"accidentally-discarded-asynchronous-values\"\u003eAccidentally discarded asynchronous values\u003c/h3\u003e\n\n\u003cp\u003eThe purpose of this article is to look at asynchronous problems but I haven\u0026rsquo;t written any asynchronous code. I will, I promise, but let\u0026rsquo;s look at one last synchronous test case, to establish a baseline:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestReceiveOnImmediate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpectation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n            \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efulfill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is close to the original Combine test I showed in the first part of this series. It sends a value (\u003ccode\u003e1\u003c/code\u003e) and completes. The test calls \u003ccode\u003e.receive(on: ImmediateScheduler.shared)\u003c/code\u003e and waits on an expectation that is fulfilled at the completion of the signal but these steps do practically nothing here because everything completes synchronously.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s try to use \u003ccode\u003ereceive(on:)\u003c/code\u003e to perform this work on a background thread:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestReceiveOnFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003equeue\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpectation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n            \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efulfill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI\u0026rsquo;ve added a custom \u003ccode\u003eDispatchQueue\u003c/code\u003e, used by the \u003ccode\u003e.receive(on: queue)\u003c/code\u003e line and I\u0026rsquo;m sending the completion on this same queue.\u003c/p\u003e\n\n\u003cp\u003eThe important result to notice is that the \u003ccode\u003ereceived\u003c/code\u003e array in the \u003ccode\u003eXCTAssertEqual\u003c/code\u003e contains the \u003ccode\u003ecompletion: .finished\u003c/code\u003e but the value (\u003ccode\u003e1\u003c/code\u003e) has disappeared. If I hadn\u0026rsquo;t changed the completion to be sent asynchronously on the \u003ccode\u003equeue\u003c/code\u003e, then even the completion would fail to be received.\u003c/p\u003e\n\n\u003cp\u003eWhat happened to the value we sent? Why does trying to send values asynchronously in Combine cause them to fail?\u003c/p\u003e\n\n\u003cp\u003eThe answer gets back to \u0026ldquo;demand\u0026rdquo;, again.\u003c/p\u003e\n\n\u003cp\u003eEarlier in this article, I showed \u0026ldquo;demand\u0026rdquo; being sent synchronously via the \u003ccode\u003ereceive(_ input: Input) -\u0026gt; Subscribers.Demand\u003c/code\u003e function. However, when values are asynchronously received, the demand is communicated asynchronously, via the separate \u003ccode\u003erequest(_ demand: Subscribers.Demand)\u003c/code\u003e function on the specified queue.\u003c/p\u003e\n\n\u003cp\u003eThis is the cause of our lost values: the \u003ccode\u003erequest(_ demand: Subscribers.Demand)\u003c/code\u003e function had not run on the background \u003ccode\u003equeue\u003c/code\u003e by the time we called \u003ccode\u003esubject.send(1)\u003c/code\u003e, so the \u0026ldquo;demand\u0026rdquo; known to the \u003ccode\u003ePassthroughSubject\u003c/code\u003e is at a default of zero and it simply discarded our value.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s look at this in detail with the \u003ccode\u003e.debug()\u003c/code\u003e publisher:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestReceiveWithLogging\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n\n   \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Start...\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecancellable\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edebug\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \n   \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Phase 1...\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Phase 2...\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euntil\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeIntervalSinceNow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Phase 3...\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Phase 4...\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euntil\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeIntervalSinceNow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003ecancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eInstead of running on a background \u003ccode\u003eDispatchQueue\u003c/code\u003e, I\u0026rsquo;m running everything on the main thread so I can run the \u003ccode\u003eRunLoop\u003c/code\u003e at controlled points.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edebug()\u003c/code\u003e line here logs each lifecycle event through it so we can see what happens at each point:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eStart...\ntestReceiveWithLogging(), line 163: subscription PassthroughSubject\nPhase 1...\nPhase 2...\ntestReceiveWithLogging(), line 163: request unlimited\nPhase 3...\ntestReceiveWithLogging(), line 163: output 2\nPhase 4...\ntestReceiveWithLogging(), line 163: cancelled\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe subscription occurs immediately but the \u003ccode\u003erequest\u003c/code\u003e for unlimited values happens only after we let the main scheduler run. Until that point, values we might expect to be sent are completely lost.\u003c/p\u003e\n\n\u003cp\u003eThis behavior of \u003ccode\u003ereceive(on:)\u003c/code\u003e in Combine is dangerously bad to the point where I don\u0026rsquo;t think \u003ccode\u003ereceive(on:)\u003c/code\u003e should ever be used in isolation in its current state. When you create a pipeline of publishers and subscribers, you should be able to immediately send values.\u003c/p\u003e\n\n\u003ch3 id=\"safe-use-of-receive-on\"\u003eSafe use of receive(on:)\u003c/h3\u003e\n\n\u003cp\u003eBluntly, I think that \u003ccode\u003ereceive(on:)\u003c/code\u003e should \u003cem\u003ealways\u003c/em\u003e include \u003ccode\u003e.buffer\u003c/code\u003e behavior. Here\u0026rsquo;s a construction that lets \u003ccode\u003ereceive(on:)\u003c/code\u003e work as I would expect it to work:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestBufferedReceiveOn\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpectation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprefetch\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewhenFull\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edropNewest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efulfill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"thread-safety\"\u003eThread safety\u003c/h2\u003e\n\n\u003cp\u003eNow that we see how \u0026ldquo;demand\u0026rdquo; and asynchronous receiving work, we can see that the \u003ccode\u003etestReceiveOnFailure\u003c/code\u003e test case was really an example of a race condition. There was no \u003cstrong\u003ememory race\u003c/strong\u003e (multiple threads accessing the same memory at the same time) but there was a \u003cstrong\u003elogical race\u003c/strong\u003e (where steps were not performed in the expected order due to thread timing). We fixed this race by including a buffer (which establishes demand synchronously) but this does raise the question: what actions are thread-safe in Combine? Are any actions explicitly thread unsafe?\u003c/p\u003e\n\n\u003cp\u003eIt\u0026rsquo;s difficult to know what thread safety guarantees exist in Combine because the documentation is surprisingly empty of thread safety discussion. A web search across the Combine documentation reveals only: \u0026ldquo;Canceling a Subscription must be thread-safe\u0026rdquo; on the description of the \u003ccode\u003eSubscription\u003c/code\u003e protocol.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s try some crazy things and see if we can get some thread-unsafety.\u003c/p\u003e\n\n\u003ch3 id=\"is-cancelling-a-subscription-thread-safe\"\u003eIs cancelling a subscription thread-safe?\u003c/h3\u003e\n\n\u003cp\u003eAs I showed at the end of the \u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-2.html#looking-forward\"\u003eprevious article\u003c/a\u003e, cancelling a subscription is not thread-safe, at least, not in the broadest asynchronous ordering sense:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSinkCancellationPlusAsyncDelivery\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJust\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euntil\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeIntervalSinceNow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis test shows us cancelling a sink, at which point we have received no values. Later a value arrives, even though on our cancelled sink. This isn\u0026rsquo;t exactly a thread-safety problem (there\u0026rsquo;s only one thread here) but this failure to correctly handle cancellation is likely to manifest in a number of threaded and asynchronous scenarios.\u003c/p\u003e\n\n\u003cp\u003eThis is probably just a bug but it speaks of a lack of testing in Combine around asynchronous scenarios. The problem itself is easily fixed when you consider the scenario. I\u0026rsquo;ve implemented one possible solution (by checking for a \u003ccode\u003esubscribed\u003c/code\u003e state when receiving) in my \u003ccode\u003eCustomSink\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSinkCancellationPlusImmediateAsyncDelivery\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esequence\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJust\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecustomSink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \n      \u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \n      \u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euntil\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeIntervalSinceNow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"mutual-exclusion\"\u003eMutual exclusion\u003c/h3\u003e\n\n\u003cp\u003eLet\u0026rsquo;s simulate a possible cause of memory races by trying to run a closure simultaneously on multiple threads.\u003c/p\u003e\n\n\u003cp\u003eWhat happens if we simultaneously send a value to a \u003ccode\u003eSubject\u003c/code\u003e/\u003ccode\u003eSubscriber\u003c/code\u003e pair from a hundred different threads at the same time? Will our \u003ccode\u003eSubscriber\u003c/code\u003e\u0026rsquo;s handler closure be concurrently invoked, causing thread safety problems?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSubjectOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esequenceLength\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esemaphore\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchSemaphore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etotal\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAtomicBox\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecollision\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n         \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisMutating\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Check to see if this closure is concurrently invoked\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecollision\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n         \u003cspan class=\"n\"\u003etotal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emutate\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// Make sure we\u0026#39;re in the handler for enough time to get a concurrent invocation\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eThread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eforTimeInterval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esequenceLength\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n               \u003cspan class=\"n\"\u003esemaphore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \n   \u003cspan class=\"c1\"\u003e// Try to send from a hundred different threads at once\u003c/span\u003e\n   \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"n\"\u003esequenceLength\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eglobal\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n         \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esemaphore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etotal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esequenceLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertFalse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecollision\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis test confirms the \u003ccode\u003ereceiveValue\u003c/code\u003e closure is never invoked simultaneously on multiple threads.\u003c/p\u003e\n\n\u003cp\u003eInspecting the call to \u003ccode\u003ereceiveValue\u003c/code\u003e in the debugger reveals that the \u003ccode\u003ePassthroughSubject.Conduit.offer\u003c/code\u003e function appears to block in an \u003ccode\u003eos_unfair_lock\u003c/code\u003e if another thread is sending through the \u003ccode\u003ePassthroughSubject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eShort answer: Combine does appear to be thread-safe due to mutexes applied by \u003ccode\u003eSubject\u003c/code\u003es.\u003c/p\u003e\n\n\u003ch3 id=\"sequence-ordering\"\u003eSequence ordering\u003c/h3\u003e\n\n\u003cp\u003eWhat happens if we do something thread unsafe in the middle of a pipeline?\u003c/p\u003e\n\n\u003cp\u003eInstead of sending values from 100 threads at one pipeline, lets send 100 values down one pipeline via a concurrent (and therefore non-ordered) scheduler.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestDeliveryOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esequence\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePublishers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSequence\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eClosedRange\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpectation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esequence\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eglobal\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efulfill\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"bp\"\u003ewithExtendedLifetime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNotEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you use a concurrent queue, you lose your sequence ordering. I guess that makes sense but it\u0026rsquo;s worth keeping in mind that if ordering is important, then don\u0026rsquo;t use \u003ccode\u003eDispatchQueue.global()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"re-entrancy\"\u003eRe-entrancy\u003c/h3\u003e\n\n\u003cp\u003eDoes Combine allow same-thread re-entrancy?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestReentrancy\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubscriber\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n         \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYes, it does. Despite using an \u003ccode\u003eos_unfair_lock\u003c/code\u003e (usually non-reentrant) as its mutex, \u003ccode\u003ePassthroughSubject\u003c/code\u003e allows same-thread re-entrancy. This operates as classic functional recursion and has the expected consequences (here, the values are appended in the reverse order to which they arrive).\u003c/p\u003e\n\n\u003cp\u003eFor comparison, here\u0026rsquo;s another test that attempts re-entrancy via a second thread (attempting a send from the main thread onto a background thread for a \u003ccode\u003eSubject\u003c/code\u003e that is already sending):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"cp\"\u003e#if\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// NOTE: this test deadlocks\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestDeadlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esemaphore\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchSemaphore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esequenceLength\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003etotal\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emach_absolute_time\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n         \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n         \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003esequenceLength\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eglobal\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003esequenceLength\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euntil\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeIntervalSinceNow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etotal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esequenceLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you\u0026rsquo;d expect, given a recursive mutex, it deadlocks.\u003c/p\u003e\n\n\u003ch2 id=\"performance\"\u003ePerformance\u003c/h2\u003e\n\n\u003cp\u003eDo you need maximum performance in your reactive programming framework? Probably not.\u003c/p\u003e\n\n\u003cp\u003eFor the reactive programming framework to cause performance problems, you need to be sending a \u003cem\u003elot\u003c/em\u003e of messages between components. Tens thousand messages per second is the point where you might start to care about the speed of the reactive programming framework, rather than the code it invokes. In these cases, it would be possible for a poorly implemented message transport mechanism to become a bottleneck.\u003c/p\u003e\n\n\u003cp\u003eThis is \u003cem\u003enot\u003c/em\u003e common when using reactive programming for bindings in user-applications. User-initiated events rarely exceed hundreds per second. However, if you\u0026rsquo;re using reactive programming as part of a processing queue then it becomes easily possible.\u003c/p\u003e\n\n\u003cp\u003eEven with a poorly performing reactive programming framework, you can usually avoid bottlenecks in your transport mechanism by aggregating inter-component messages. However, it\u0026rsquo;s nice to know that your transport is high performance so you can wait longer before needing to take optimizing steps and you won\u0026rsquo;t have to make decisions that trade latency for throughput.\u003c/p\u003e\n\n\u003ch3 id=\"a-few-scenarios\"\u003eA few scenarios\u003c/h3\u003e\n\n\u003cp\u003eI ran a three-way performance test between Combine, RxSwift and CwlSignal.\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"right\"\u003e\u003c/th\u003e\n\u003cth align=\"center\"\u003eCombine\u003c/th\u003e\n\u003cth align=\"center\"\u003eRxSwift\u003c/th\u003e\n\u003cth align=\"center\"\u003eCwlSignal\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eSubject send\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e5.021\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e3.826\u003c/td\u003e\n\u003ctd align=\"center\"\u003e4.495\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eSequence send\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e1.154\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.288\u003c/td\u003e\n\u003ctd align=\"center\"\u003e1.052\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eAsync send\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.200\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.359\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e1.280\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eDeep pipeline\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e2.624\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e1.814\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.176\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cfigcaption\u003ePerformance on macOS 10.15 beta 6 in millions of values sent per second (higher is better)\u003c/figcaption\u003e\n\n\u003cp\u003eWhat do these numbers tell us? Frankly, none of these numbers are too bad.\u003c/p\u003e\n\n\u003cp\u003eThe \u0026ldquo;async send\u0026rdquo; number (critical for most operations queues where performance really matters) is a little low for Combine. Part of this slow performance is because I put a \u003ccode\u003e.buffer\u003c/code\u003e in the pipeline ahead of the \u003ccode\u003ereceive(on:)\u003c/code\u003e (without this \u003ccode\u003e.buffer\u003c/code\u003e the number would be closer to 0.5 than 0.2 but that\u0026rsquo;s still a little slow).\u003c/p\u003e\n\n\u003cp\u003eAnnoying workarounds and async issues notwithstanding, Combine is a good, high performance framework. While modern CPUs can perform billions of operations per second, it is \u003cem\u003edifficult\u003c/em\u003e to reach 5 million iterations per second in code involving generics and mutexes, so Combine has done well.\u003c/p\u003e\n\n\u003cp\u003eThese figures are from macOS 10.15 beta 6, running on my Mac Book Pro 2018. In beta 4, the Combine numbers looked like this:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"right\"\u003e\u003c/th\u003e\n\u003cth align=\"center\"\u003eCombine\u003c/th\u003e\n\u003cth align=\"center\"\u003eRxSwift\u003c/th\u003e\n\u003cth align=\"center\"\u003eCwlSignal\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eSubject send\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.891\u003c/td\u003e\n\u003ctd align=\"center\"\u003e3.782\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e4.512\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eSequence send\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e1.011\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.277\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.998\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eAsync send\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.140\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.359\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e1.112\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"right\"\u003eDeep pipeline\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.954\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003cstrong\u003e1.888\u003c/strong\u003e\u003c/td\u003e\n\u003ctd align=\"center\"\u003e0.180\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cfigcaption\u003ePerformance on macOS 10.15 beta 4 in millions of values sent per second (higher is better)\u003c/figcaption\u003e\n\n\u003cp\u003eYou can see that since beta 4, Combine has dramatically improved on most tests. However, these numbers have been bouncing around from beta to beta (in macOS 10.15 beta 5, Combine briefly peaked at 7 million values per second on the \u0026ldquo;Subject send\u0026rdquo; test and has since dropped down to 5 million).\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDownload\u003c/strong\u003e: The code for this series, \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003eCombineExploration, is available on github\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI\u0026rsquo;ve been hard on Combine in these three articles. I don\u0026rsquo;t think Combine is a bad framework but in its current state, I think there are a few critical areas where it works badly. I think these problem areas are going to cause reliability issues for many developers until they are addressed.\u003c/p\u003e\n\n\u003cp\u003eTo me, the most important improvements Combine should make are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eSubscription\u003c/code\u003e and other \u0026ldquo;black boxes\u0026rdquo; should be fully documented (we shouldn\u0026rsquo;t be guessing about thread safety and graph lifecycles)\u003c/li\u003e\n\u003cli\u003esupport buffered subjects and other ways of sharing cached computations\u003c/li\u003e\n\u003cli\u003esupport scenarios where demand must never be zero\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereceive(on:)\u003c/code\u003e should synchronously establish initial demand (only \u003ccode\u003esubscribe(on:)\u003c/code\u003e should asynchronously complete construction)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI\u0026rsquo;ve shown that we can work around these problems but proper fixes will need to occur in Combine itself.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026rsquo;s apparent that Combine has kept to many of the overall goals of the \u003ca href=\"https://www.reactive-streams.org\"\u003eReactive Streams initiative\u003c/a\u003e. This initiative is promoted by groups that work with networked, multi-client, server-limited processing. The strict mandates for subscriptions and asynchronous backpressure support that use case but in my use cases (view-bindings and single-client operation queues), I\u0026rsquo;ve found the entire concepts of backpressure and subscriptions to be a hinderance and a source of spurious failures and design challenges.\u003c/p\u003e\n\n\u003cp\u003eWhat I want from Combine is to better support scenarios where multi-subscribing and demand are effectively disabled (have no measurable effect) and focus more on caching sequences emitted by hot publishers for sharing between dynamically changing subscribers because this is the natural way to program in an imperative programming language.\u003c/p\u003e\n",
            "date_published": "2019-08-18T10:16:01+10:00"
        }
        
        , {
            "title": "22 short tests of combine – Part 2: Sharing",
            "id": "https://www.cocoawithlove.com/blog/twenty-two-short-tests-of-combine-part-2.html",
            "url": "https://www.cocoawithlove.com/blog/twenty-two-short-tests-of-combine-part-2.html",
            "content_html": "\n\n\u003cp\u003eI wrote some experiments around Combine, Apple\u0026rsquo;s reactive programming framework, to gain insight into how Combine handles edge cases that have caused problems for me in other reactive programming frameworks.\u003c/p\u003e\n\n\u003cp\u003eLooking at everything in one article got much too long so I broke it into three parts:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-1.html\"\u003ere-implementing the core protocols of Combine\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eshared computation, shared reference lifetimes and sharing subscribers\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-3.html\"\u003easynchrony, threading and performance\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis article will be the middle third, an investigation spanning a trio of topics with \u0026ldquo;shared\u0026rdquo; in the name: shared computation, shared reference lifetimes and sharing subscribers.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDownload\u003c/strong\u003e: The code for this series, \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003eCombineExploration, is available on github\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: This is not a tutorial for Combine; I\u0026rsquo;ll assume you already know the basics and I\u0026rsquo;ll be using Combine in odd ways. Additionally, the code in these articles includes guesswork based on inferred behaviors and probably includes some mistakes.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"hot-and-cold-publishers\"\u003eHot and cold publishers\u003c/h2\u003e\n\n\u003cp\u003eIn \u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-1.html\"\u003ethe previous article\u003c/a\u003e, I focussed on Combine\u0026rsquo;s largely hidden \u003ccode\u003eSubscription\u003c/code\u003e type and the fact that Combine creates a new graph of \u003ccode\u003eSubscription\u003c/code\u003e types for every new subscriber. Using this independent subscription graph allows Combine to follow the \u0026ldquo;cold publisher\u0026rdquo; model:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA \u003cstrong\u003ecold publisher\u003c/strong\u003e is one where the emitted sequence of values is lazily constructed and traversed when requested by a downstream subscriber. Asynchronous tasks begin on subscription, not construction of the publisher. The graph may not change structure for the entire duration of the sequence.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"aside\"\u003eThe terms \"cold publisher\" and \"hot publisher\" are usually \"cold observable\" and \"hot observable\" in other Rx frameworks. I've changed the terminology to match Combine's terms but the ideas are equivalent.\u003c/div\u003e\n\n\u003cp\u003eIn a \u0026ldquo;cold publisher\u0026rdquo; graph, you don\u0026rsquo;t need to cache values because a value exists only at the moment it is requested by a subscriber and immediately handed over. A subscriber cannot re-request old values and any request for values made by a new subscriber is really a request to calculate the values again. Caching values in a \u0026ldquo;cold publisher\nmodel doesn\u0026rsquo;t make sense.\u003c/p\u003e\n\n\u003cp\u003eHowever, this model isn\u0026rsquo;t practical outside of strict functional programming languages. Aside from the fact that we don\u0026rsquo;t want to waste time calculating the same values, there is also the problem of network data, the filesystem, host time, user interactions and other side effects that may start before our program is ready and run independent of any Combine graph we may have created and will never play nicely with a \u0026ldquo;cold publisher\u0026rdquo; model.\u003c/p\u003e\n\n\u003cp\u003eIn imperative programming, we need \u0026ldquo;hot publishers\u0026rdquo;.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA \u003cstrong\u003ehot publisher\u003c/strong\u003e may produce values at any time and at any rate, regardless of the demand from downstream subscribers. The graph may continue to change in structure during the sequence. Publishers must encode rules about what to do with values that exceed downstream demand or how to handle new subscribers joining an existing value sequence.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn almost all cases, a \u0026ldquo;hot publisher\u0026rdquo; in Combine will use a \u003ccode\u003eSubject\u003c/code\u003e (either externally or internally). \u003ccode\u003eSubject\u003c/code\u003es play an important role in \u0026ldquo;hot\u0026rdquo; graphs because a \u003ccode\u003eSubject\u003c/code\u003e is a publisher with a single shared identity (most publishers create a new independent identity for each downstream subscription).\u003c/p\u003e\n\n\u003ch2 id=\"sharing-via-multicast\"\u003eSharing via multicast\u003c/h2\u003e\n\n\u003cp\u003eThe essential part of working with a graph that contains \u0026ldquo;hot publishers\u0026rdquo; is that you must be able to handle new subscribers joining in the middle of a sequence.\u003c/p\u003e\n\n\u003cp\u003eIn the previous article, I discussed the idea that there were 5 different kinds of approach to handling multiple subscribers:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003emulticast\u003c/li\u003e\n\u003cli\u003ecaching\u003c/li\u003e\n\u003cli\u003elatest value\u003c/li\u003e\n\u003cli\u003ecustom caching\u003c/li\u003e\n\u003cli\u003eresubscribe\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ebut I looked only at resubscribe because this is the \u0026ldquo;cold publisher\u0026rdquo; favored option in Combine.\u003c/p\u003e\n\n\u003cp\u003eIn my \u003ccode\u003etestOverlappingABCD\u003c/code\u003e example showing \u0026ldquo;resubscribe\u0026rdquo; behavior, I used \u003ccode\u003eDeferred\u003c/code\u003e to simulate a \u0026ldquo;cold publisher\u0026rdquo; while still offering the ability to manually send values into each subscription. Let\u0026rsquo;s change this example to remove the independent \u003ccode\u003ePassthroughSubject\u003c/code\u003es created inside a \u003ccode\u003eDeferred\u003c/code\u003e closure and instead use a single, shared \u003ccode\u003ePassthroughSubject\u003c/code\u003e (without \u003ccode\u003eDeferred\u003c/code\u003e).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSharedSubjectABCD\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubjectA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escanB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esinkC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esinkD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis no longer behaves like \u0026ldquo;resubscribe\u0026rdquo;. Now, \u003ccode\u003eD\u003c/code\u003e receives only 2 values – related to the two values sent after it connected.\u003c/p\u003e\n\n\u003cp\u003eThis is almost what we\u0026rsquo;d expect in a \u0026ldquo;multicast\u0026rdquo; scenario except that \u003ccode\u003eD\u003c/code\u003e doesn\u0026rsquo;t receive the same \u003ccode\u003e16, 20\u003c/code\u003e that \u003ccode\u003eC\u003c/code\u003e receives. Instead, it receives \u003ccode\u003e13, 17\u003c/code\u003e. What happened?\u003c/p\u003e\n\n\u003cp\u003eThis graph has two conflicting ideas:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe shared \u003ccode\u003ePassthroughSubject\u003c/code\u003e is a shared \u0026ldquo;hot\u0026rdquo; publisher\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escan\u003c/code\u003e is a \u0026ldquo;cold\u0026rdquo; publisher and a separate value of the \u003ccode\u003estate\u003c/code\u003e is created for each subscriber\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhile the \u003ccode\u003ePassthroughSubject\u003c/code\u003e is shared between \u003ccode\u003eC\u003c/code\u003e and \u003ccode\u003eD\u003c/code\u003e, there are two separate \u003ccode\u003eSubscription\u003c/code\u003e instances created for the \u003ccode\u003escan\u003c/code\u003e (with different values of \u003ccode\u003estate\u003c/code\u003e) so we get different outputs.\u003c/p\u003e\n\n\u003cp\u003eThis is an example of hot publishers and stateful cold publishers playing poorly together. To eliminate this strangeness, we need to entirely enclose the \u003ccode\u003escan\u003c/code\u003e publisher in \u0026ldquo;hot\u0026rdquo; endpoints so that only one \u003ccode\u003escan\u003c/code\u003e subscription is ever created.\u003c/p\u003e\n\n\u003cp\u003eWe can do this by putting a \u003ccode\u003ePublishers.Multicast\u003c/code\u003e after the \u003ccode\u003escan\u003c/code\u003e publisher:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestMulticastABCD\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubjectA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emulticastB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emulticast\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecancelB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emulticastB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emulticastB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emulticastB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esinkC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esinkD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ecancelB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe now have \u003ccode\u003eC\u003c/code\u003e and \u003ccode\u003eD\u003c/code\u003e correctly receiving a \u0026ldquo;multicast\u0026rdquo; version of the same stream. \u003ccode\u003eD\u003c/code\u003e receives the same \u003ccode\u003e16, 20\u003c/code\u003e values that \u003ccode\u003eC\u003c/code\u003e receives after it subscribes.\u003c/p\u003e\n\n\u003ch2 id=\"caching-computation\"\u003eCaching computation\u003c/h2\u003e\n\n\u003cp\u003eThe other forms of \u0026ldquo;shared computation\u0026rdquo; that I mentioned (\u0026ldquo;caching\u0026rdquo;, \u0026ldquo;latest value\u0026rdquo; and \u0026ldquo;custom caching\u0026rdquo;) are all forms of holding onto recently emitted values.\u003c/p\u003e\n\n\u003cp\u003eCombine offers just one built-in way of doing this: \u003ccode\u003eCurrentValueSubject\u003c/code\u003e, which offers \u0026ldquo;latest value\u0026rdquo; caching. We can use this by replacing the \u003ccode\u003ePassthroughSubject\u0026lt;Int, Never\u0026gt;()\u003c/code\u003e in the previous test with \u003ccode\u003eCurrentValueSubject\u0026lt;Int, Never\u0026gt;(0)\u003c/code\u003e. Running the test in this way confirms the following values:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA \u003ccode\u003eCurrentValueSubject\u003c/code\u003e is great for user-interfaces that always need a value and need only the latest \u0026ldquo;state\u0026rdquo; from an publisher or service.\u003c/p\u003e\n\n\u003cp\u003eBeyond user-interfaces though, we often need more of the stream than the latest value.\u003c/p\u003e\n\n\u003cp\u003eYou might think that the \u003ccode\u003ePublishers.Buffer\u003c/code\u003e operator in Combine could help with this, however, this operator is actually for managing demand between a hot publisher and a downstream subscriber and doesn\u0026rsquo;t apply to buffering between downstream subscriber. The \u003ccode\u003eRecord\u003c/code\u003e publisher also doesn\u0026rsquo;t seem quite right as it doesn\u0026rsquo;t really stream values from an upstream publisher. Unless I\u0026rsquo;m missing something, there \u003cem\u003eisn\u0026rsquo;t\u003c/em\u003e a way to multicast with a playback buffer greater than one value in Combine.\u003c/p\u003e\n\n\u003cp\u003eWhat would be needed is a \u003ccode\u003eSubject\u003c/code\u003e, like \u003ccode\u003eCurrentValueSubject\u003c/code\u003e, that can buffer more than just the latest value (and doesn\u0026rsquo;t force an initial value, if none has yet been received).\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve implemented a custom subject to handle this scenario: \u003ccode\u003eBufferSubject\u003c/code\u003e. Dropping \u003ccode\u003eBufferSubject(limit: Int.max)\u003c/code\u003e in place of the subject constructor in the last test confirms the following values:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is a completely cached, \u0026ldquo;playback\u0026rdquo; sequence, shared between \u003ccode\u003eC\u003c/code\u003e and \u003ccode\u003eD\u003c/code\u003e. Values pass through \u003ccode\u003escan\u003c/code\u003e and are sent immediately to \u003ccode\u003eC\u003c/code\u003e but buffered and replayed for \u003ccode\u003eD\u003c/code\u003e when it subscribes.\u003c/p\u003e\n\n\u003ch2 id=\"reference-lifetimes\"\u003eReference lifetimes\u003c/h2\u003e\n\n\u003cp\u003eIn the previous test cases, I\u0026rsquo;ve been carefully calling \u003ccode\u003ecancel()\u003c/code\u003e on the \u003ccode\u003eSubscribers.Sink\u003c/code\u003e and the \u003ccode\u003econnect()\u003c/code\u003e results. This behavior is not because I wanted to cancel these values but instead because I wanted to guarantee that I was keeping their references alive so their associated subscriptions don\u0026rsquo;t get cancelled until the end of the function.\u003c/p\u003e\n\n\u003cp\u003eIs carefully keeping references alive strictly necessary?\u003c/p\u003e\n\n\u003cp\u003eThe answer is complicated to test for two reasons:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIn Release builds, Swift may release references in the middle of a scope (like a function) but in Debug builds, Swift usually won\u0026rsquo;t release until the end of the scope.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnyCancellable\u003c/code\u003e is a reference that calls \u003ccode\u003ecancel()\u003c/code\u003e automatically on \u003ccode\u003edeinit\u003c/code\u003e. Other types of \u003ccode\u003eCancellable\u003c/code\u003e will usually not but might (you never know).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNeither of these rules make accurate analysis easy. Let\u0026rsquo;s start with some examples that use \u003ccode\u003eAnyCancellable\u003c/code\u003e (avoiding complications with point 2) and deliberately create our own dummy scopes (which will avoid most complications with point 1).\u003c/p\u003e\n\n\u003cp\u003eThis is how \u003ccode\u003eAnyCancellable\u003c/code\u003e behaves:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestAnyCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n\n   \u003cspan class=\"kr\"\u003eweak\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eweakCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eAnyCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\n   \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eanyCancellable\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eweakCancellable\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eanyCancellable\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eanyCancellable\u003c/code\u003e falls out of scope at the end of the \u003ccode\u003edo {}\u003c/code\u003e, cancelling the subscription so sending the second value (\u003ccode\u003esend(2)\u003c/code\u003e) has no effect.\u003c/p\u003e\n\n\u003cp\u003eThis is probably the behavior that is most in-line with expectations but let\u0026rsquo;s look instead at raw use of \u003ccode\u003eSubscribers.Sink\u003c/code\u003e, which conforms to \u003ccode\u003eCancellable\u003c/code\u003e but does not offer the same \u0026ldquo;auto-cancel when released\u0026rdquo; guarantee:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSinkCancellation\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \n   \u003cspan class=\"kr\"\u003eweak\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eweakSink\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;?\u003c/span\u003e\n   \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eweakSink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esink\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \n      \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNotNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eweakSink\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eSink\u003c/code\u003e is not strongly referenced outside the \u003ccode\u003edo {}\u003c/code\u003e but is still alive when the \u003ccode\u003esend(2)\u003c/code\u003e value reaches the \u003ccode\u003ereceived\u003c/code\u003e array. It is only when we \u003cem\u003eexplicitly\u003c/em\u003e call \u003ccode\u003ecancel()\u003c/code\u003e that further values stop being delivered.\u003c/p\u003e\n\n\u003cp\u003eIf we drop all our strong references to \u003ccode\u003eSink\u003c/code\u003e, it can continue to receive values while there is an active subscription. In fact, we can drop our \u003ccode\u003ePassthroughSubject\u003c/code\u003e, too:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestOwnership\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n\n   \u003cspan class=\"kr\"\u003eweak\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;?\u003c/span\u003e\n   \u003cspan class=\"kr\"\u003eweak\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eweakSink\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;?\u003c/span\u003e\n   \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eweakSink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esink\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNotNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNotNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eXCTAssertNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don\u0026rsquo;t have to hold \u003cem\u003eany\u003c/em\u003e references to the graph. It continues to stay alive, all on its own, until the current subscription completes.\u003c/p\u003e\n\n\u003cp\u003eThis is a dangerous scenario. In short, to have sane memory management with Combine, you \u003cem\u003emust\u003c/em\u003e ensure there is at least one \u003ccode\u003eAnyCancellable\u003c/code\u003e connected to your graph.\u003c/p\u003e\n\n\u003ch2 id=\"multiple-subscriptions\"\u003eMultiple subscriptions\u003c/h2\u003e\n\n\u003cp\u003eMany of these test cases have focussed on what happens when there are multiple \u003ccode\u003eSubscriber\u003c/code\u003es connected to the same \u003ccode\u003ePublisher\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhat happens if you do the inverse: take a single \u003ccode\u003eSubscribers.Sink\u003c/code\u003e and subscribe it to multiple \u003ccode\u003ePublisher\u003c/code\u003es?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestMultipleSubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003esubject1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eShort answer: the \u003ccode\u003eSink\u003c/code\u003e remains subscribed to the first subject and ignores everything from the second. However, it\u0026rsquo;s not an error of any kind, just a silent failure. It seems like sharing a \u003ccode\u003eSubscriber\u003c/code\u003e isn\u0026rsquo;t something you should ever do.\u003c/p\u003e\n\n\u003cp\u003eThis test isn\u0026rsquo;t just abstract interface abuse. I want something that offers the ability to subscribe multiple times to different upstream subscriptions with this kind of simplicity. For the first subscription to a \u003ccode\u003ePublisher\u003c/code\u003e, the downstream \u003ccode\u003eSubscriber\u003c/code\u003e will own the subscription and will \u003ccode\u003ecancel\u003c/code\u003e it if the downstream nodes are cancelled. It\u0026rsquo;s elegant and self-contained but handles just one subscription.\u003c/p\u003e\n\n\u003cp\u003eThe only multi-subscribable interface in Combine, by default, is \u003ccode\u003eSubject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestMultiSubjectSubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emultiInputSubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecancellable1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emultiInputSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecancellable2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emultiInputSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003emultiInputCancellable\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emultiInputSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003ecancellable1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003ecancellable2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003emultiInputCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis works – the \u003ccode\u003emultiInputCancellable\u003c/code\u003e receives from both \u003ccode\u003esubject\u003c/code\u003e and \u003ccode\u003esubject2\u003c/code\u003e – but you must hold onto each \u003ccode\u003eAnyCancellable\u003c/code\u003e and there\u0026rsquo;s no implicit cancellation of upstream subscriptions the subject falls out of scope.\u003c/p\u003e\n\n\u003cp\u003eFortunately, it\u0026rsquo;s very easy to set up a better approach where these upstream \u003ccode\u003eCancellable\u003c/code\u003es are held internally and automatically cancelled when the downstream is cancelled. It involves little more than a combination of the subjects and sinks from the previous test, hidden behind a clean interface:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestMergeSink\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003einput\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMergeInput\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einto\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einto\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecancellable\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003esubject1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003ecancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis \u003ccode\u003eMergeInput\u003c/code\u003e interface does not receive completion from upstream publishers. This is an intentional choice: for this type of multi-input scenario, you generally don\u0026rsquo;t want one input to close the \u003ccode\u003eMergeInput\u003c/code\u003e and cut off all other inputs.\u003c/p\u003e\n\n\u003ch2 id=\"subscriber-reactivation\"\u003eSubscriber reactivation\u003c/h2\u003e\n\n\u003cp\u003eThe previous tests revealed that a \u003ccode\u003eSubscriber\u003c/code\u003e will not accept new subscriptions while it already has an active subscription. A related question is: what happens if you subscribe to a second \u003ccode\u003ePublisher\u003c/code\u003e after the first subscription completes? Can you \u0026ldquo;reactivate\u0026rdquo; a completed subscriber?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSinkReactivation\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"kr\"\u003eweak\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;?\u003c/span\u003e\n   \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \n      \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNotNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e?.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"c1\"\u003e// At this point, the first subscription to sink is finished\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertNil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eweakSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \n   \u003cspan class=\"c1\"\u003e// Try to start a new one\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject2\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"cp\"\u003e#if\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// Prior to macOS 10.15 beta 6...\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"cp\"\u003e#else\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// In macOS 10.15 beta 6...\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"cp\"\u003e#endif\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is an example of behavior that changed while I was writing this series on Combine. Until macOS 10.15 beta 7, it was possible to reuse a subscriber, once any previous subscription completed.\u003c/p\u003e\n\n\u003cp\u003eApparently, that changed in beta 7. Now, a \u003ccode\u003eSubscriber\u003c/code\u003e is strictly a non-shareable object. It lives for the duration of a subscription and subsequently declines to do anything more.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDownload\u003c/strong\u003e: The code for this series, \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003eCombineExploration, is available on github\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI don\u0026rsquo;t personally like cold publishers. I think they are a counter-intuitive solution to some edge cases that can create problems in some common cases. Any interaction between hot publishers and stateful cold publishers needs to be carefully managed to achieve consistent outputs.\u003c/p\u003e\n\n\u003cp\u003eCombine offers no built-in way to cache more than a single value. Fortunately, I\u0026rsquo;ve shown that it isn\u0026rsquo;t particularly difficult to buffer additional values by creating a custom \u003ccode\u003eBufferSubject\u003c/code\u003e that you can use with \u003ccode\u003eMulticast\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe subscriber graph in Combine maintains a reference counted loop while a subscription is active. If you\u0026rsquo;re using \u003ccode\u003e.sink\u003c/code\u003e (or a handful of other convenience methods) as part of your graph, this won\u0026rsquo;t matter, since the returned \u003ccode\u003eAnyCancellable\u003c/code\u003e will break the loop. However, more manual constructions – like using \u003ccode\u003eSubscribers.Sink\u003c/code\u003e – don\u0026rsquo;t offer the same convenience so be careful to wrap types in \u003ccode\u003eAnyCancellable\u003c/code\u003e as appropriate to avoid memory leaks.\u003c/p\u003e\n\n\u003cp\u003eTests reveal \u003ccode\u003eSubscribers.Sink\u003c/code\u003e will not trigger any kind of error if you subscribe it multiple times but it will not listen to new subscriptions.\u003c/p\u003e\n\n\u003cp\u003eIf you want a sink that handle multiple inputs, you must use a \u003ccode\u003eSubject\u003c/code\u003e. The default \u003ccode\u003ePublisher.subscribe(Subject)\u003c/code\u003e is a little fussy (requiring you hold onto additional \u003ccode\u003eCancellable\u003c/code\u003e instances) so I provided a convenience \u003ccode\u003emerge(into:)\u003c/code\u003e for the purpose.\u003c/p\u003e\n\n\u003ch3 id=\"looking-forward\"\u003eLooking forward\u0026hellip;\u003c/h3\u003e\n\n\u003cp\u003eGiven the tested behavior showing \u003ccode\u003eSubscriber\u003c/code\u003e ignores subsequent subscriptions and attempts at reuse after completion, you might expect that \u003ccode\u003eSubscriber\u003c/code\u003e will never emit values once it reaches the end of a sequence or is cancelled.\u003c/p\u003e\n\n\u003cp\u003eYou\u0026rsquo;d be wrong.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSinkCancellationPlusAsyncDelivery\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eJust\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDispatchQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecancel\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003eRunLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euntil\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etimeIntervalSinceNow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.001\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis test shows us cancelling a sink, at which point we have received no values. Later a value arrives on our cancelled sink.\u003c/p\u003e\n\n\u003cp\u003eThere\u0026rsquo;s a possibility that this behavior is Combine \u0026ldquo;behaving as expected\u0026rdquo; but realistically there is no scenario where this is a good outcome. Combine has some serious rough edges around anything asynchronous and this is not the only scenario that causes problems.\u003c/p\u003e\n\n\u003cp\u003eIn the final part of this series, I\u0026rsquo;ll look at why this behavior occurs and some possible workarounds until Combine fixes its design to eliminate these problems.\u003c/p\u003e\n",
            "date_published": "2019-08-17T10:16:01+10:00"
        }
        
        , {
            "title": "22 short tests of Combine – Part 1: Protocols",
            "id": "https://www.cocoawithlove.com/blog/twenty-two-short-tests-of-combine-part-1.html",
            "url": "https://www.cocoawithlove.com/blog/twenty-two-short-tests-of-combine-part-1.html",
            "content_html": "\n\n\u003cp\u003eI wrote some experiments around Combine, Apple\u0026rsquo;s reactive programming framework, to gain insight into how Combine handles edge cases that have caused problems for me in other reactive programming frameworks. How do subscriptions work? How do I cache computations? When are publishers and subscribers released? Under what circumstances is Combine thread-safe? Is re-entrancy possible? Does Combine guarantee delivery-order? How does Combine\u0026rsquo;s performance compare to pre-existing reactive frameworks?\u003c/p\u003e\n\n\u003cp\u003eLooking at everything in one article got much too long so I broke it into three parts:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ere-implementing the core protocols of Combine\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-2.html\"\u003ea trio of topics: shared computation, shared reference lifetimes and sharing subscribers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/blog/twenty-two-short-tests-of-combine-part-3.html\"\u003easynchrony, threading and performance\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis article will be the first third of my investigation, covering an effort to re-implement the three key protocols of Combine: \u003ccode\u003ePublisher\u003c/code\u003e, \u003ccode\u003eSubscriber\u003c/code\u003e and \u003ccode\u003eSubscription\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDownload\u003c/strong\u003e: The code for this series, \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003eCombineExploration, is available on github\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: This is not a tutorial for Combine; I\u0026rsquo;ll assume you already know the basics and I\u0026rsquo;ll be using Combine in odd ways. Additionally, the code in these articles includes guesswork based on inferred behaviors and probably includes some mistakes.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"publisher-and-subscriber\"\u003ePublisher and Subscriber\u003c/h2\u003e\n\n\u003cp\u003eApple\u0026rsquo;s Combine is built around two key protocols, \u003ccode\u003ePublisher\u003c/code\u003e and \u003ccode\u003eSubscriber\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eThe naïve intepretation of Combine\u003c/strong\u003e is that a \u003ccode\u003ePublisher\u003c/code\u003e emits a sequence of values.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis common interpretation is not accurate but the distinction between this \u0026ldquo;naïve\u0026rdquo; interpretation and an \u0026ldquo;accurate\u0026rdquo; interpretation is rare enough that we often ignore the difference.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ePublisher\u003c/code\u003e is defined as:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003ePublisher\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eFailure\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003eSelf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFailure\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003eSelf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAccording to the protocol, a \u003ccode\u003ePublisher\u003c/code\u003e does not emit values but receives \u003ccode\u003eSubscriber\u003c/code\u003es. Of course, depending on what a \u003ccode\u003eSubscriber\u003c/code\u003e is, the \u003ccode\u003ePublisher\u003c/code\u003e might still directly emit values into these \u003ccode\u003eSubscriber\u003c/code\u003es that it receives.\u003c/p\u003e\n\n\u003cp\u003eSo let\u0026rsquo;s look at the \u003ccode\u003eSubscriber\u003c/code\u003e protocol for a clearer picture:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eSubscriber\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomCombineIdentifierConvertible\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eInput\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eFailure\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eSelf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kc\"\u003eSelf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIgnoring that last function for now, the other functions here on \u003ccode\u003eSubscriber\u003c/code\u003e appear to support the \u0026ldquo;naïve\u0026rdquo; interpretation: the \u003ccode\u003ePublisher\u003c/code\u003e receives \u003ccode\u003eSubscriber\u003c/code\u003es and can send \u003ccode\u003eInput\u003c/code\u003e values or \u003ccode\u003eCompletion\u003c/code\u003e events directly to all known \u003ccode\u003eSubscriber\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s establish a \u0026ldquo;control case\u0026rdquo; to which we can compare other tests, starting with a fairly standard test of the \u003ccode\u003ePublisher\u003c/code\u003e and \u003ccode\u003eSubscriber\u003c/code\u003e model where a \u003ccode\u003eSubscribers.Sink\u003c/code\u003e (a typical \u003ccode\u003eSubscriber\u003c/code\u003e) is subscribed to a \u003ccode\u003ePassthroughSubject\u003c/code\u003e (not exactly a typical \u003ccode\u003ePublisher\u003c/code\u003e but helpful in tests since it lets us inject values easily from outside) and we record the values that pass from the subject to the sink.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSubjectSink\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubject\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceived\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esink\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esink\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceived\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis test includes a few of my own additions to make the tests easier:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSubscribers.Event\u003c/code\u003e is just an \u0026ldquo;either\u0026rdquo; over the \u003ccode\u003eValue\u003c/code\u003e and \u003ccode\u003eCompletion\u003c/code\u003e types of a Combine sequence\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esend(sequence:completion:)\u003c/code\u003e sends all values in the sequence and the completion\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easEvents\u003c/code\u003e creates an array of \u003ccode\u003eSubscribers.Event\u003c/code\u003e from an array of \u003ccode\u003eValue\u003c/code\u003e and a \u003ccode\u003eCompletion\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis test conforms to the \u0026ldquo;naïve\u0026rdquo; interpretation: values are sent to the subject are received by the closure we passed to the sink.\u003c/p\u003e\n\n\u003ch2 id=\"graph-mutations-over-time\"\u003eGraph mutations over time\u003c/h2\u003e\n\n\u003cp\u003eImagine a basic subject, \u003ccode\u003eA\u003c/code\u003e, that generates values over time (e.g. a network connection), followed by a stateful transforming node \u003ccode\u003eB\u003c/code\u003e (e.g. a \u003ccode\u003escan\u003c/code\u003e or similar streaming processor), followed by an observer \u003ccode\u003eC\u003c/code\u003e (e.g. a \u003ccode\u003eSink\u003c/code\u003e):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/blog/combine1.svg\" alt=\"\" /\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestScan\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubjectA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escanB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePublishers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eScan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einitialResult\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjectA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere\u0026rsquo;s an extra transformation line (the \u003ccode\u003escanB\u003c/code\u003e line) but relative to the original control case it\u0026rsquo;s not much different.\u003c/p\u003e\n\n\u003cp\u003eNow, what happens when, halfway through \u003ccode\u003eA\u003c/code\u003e streaming its data, a new observer \u003ccode\u003eD\u003c/code\u003e subscribes to \u003ccode\u003eB\u003c/code\u003e, totally unaware that \u003ccode\u003eB\u003c/code\u003e is already in the middle of its output?\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/blog/combine2.svg\" alt=\"\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eShould the new listener \u003ccode\u003eD\u003c/code\u003e get half the data it expected, even though it doesn\u0026rsquo;t know about \u003ccode\u003eC\u003c/code\u003e and the fact that the connection is already started?\u003c/p\u003e\n\n\u003cp\u003eThe answer is complicated. Depending on your program\u0026rsquo;s logic, you may want \u003cem\u003eany\u003c/em\u003e of the following options:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003emulticast\u003c/strong\u003e – \u003ccode\u003eD\u003c/code\u003e receives the second half of the values that \u003ccode\u003eC\u003c/code\u003e receives\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecaching\u003c/strong\u003e – the first half is buffered and \u003ccode\u003eD\u003c/code\u003e immediately receives the first half of the message upon joining and new values like multicast\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003elatest value\u003c/strong\u003e – \u003ccode\u003eD\u003c/code\u003e receives the last emitted value immediately and new values like multicast\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecustom caching\u003c/strong\u003e – \u003ccode\u003eD\u003c/code\u003e receives only as much as needed (e.g. since the last keyframe or resume point) and new values like multicast\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eresubscribe\u003c/strong\u003e – \u003ccode\u003eD\u003c/code\u003e should trigger all upstream nodes to restart their work, go all the way back to the network and re-request all data, performing all calculations, again\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn this article, I will focus only on the last of these options since it is, arguably, the default behavior in Combine. In the next article, I\u0026rsquo;ll look at the other approaches.\u003c/p\u003e\n\n\u003cp\u003eFor now though, here\u0026rsquo;s an example of resubscribe behavior:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestSequenceABCD\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esequenceA\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePublishers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSequence\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eClosedRange\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escanB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePublishers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eScan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esequenceA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einitialResult\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNone of the nodes here are recreated and most importantly, the \u003ccode\u003eB\u003c/code\u003e node – the stateful \u003ccode\u003escan\u003c/code\u003e processor – is shared between subscriptions, yet each of \u003ccode\u003eC\u003c/code\u003e and \u003ccode\u003eD\u003c/code\u003e receive an independent version of the values.\u003c/p\u003e\n\n\u003cp\u003eIn case you think something weird is happening because the sequences don\u0026rsquo;t actually overlap in time, here\u0026rsquo;s an equivalent test where the sequences values are manually delivered in an overlapping fashion:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestOverlappingABCD\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003esubjects\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edeferred\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDeferred\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erequest\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePassthroughSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escanB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePublishers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eScan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edeferred\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einitialResult\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis test case shows that the \u0026ldquo;naïve\u0026rdquo; interpretation of Combine cannot properly describe how Combine works in all cases. While there are two \u003ccode\u003ePassthroughSubject\u003c/code\u003es, two \u003ccode\u003eSubscriber.Sink\u003c/code\u003es, there is only one \u003ccode\u003escanB\u003c/code\u003e node in the \u003ccode\u003ePublisher\u003c/code\u003e graph, yet it behaves like two completely different nodes – one for the \u003ccode\u003esinkC\u003c/code\u003e and one for the \u003ccode\u003esinkD\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"subscription-the-mostly-hidden-type\"\u003eSubscription, the mostly-hidden type\u003c/h2\u003e\n\n\u003cp\u003eHow does this work?\u003c/p\u003e\n\n\u003cp\u003eDespite the programmer creating a single graph of \u003ccode\u003ePublisher\u003c/code\u003es, there is a shadow graph of other instances that really performs the value processing and sending. We can see this shadow graph in the last function in \u003ccode\u003eSubscriber\u003c/code\u003e protocol.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEvery \u003ccode\u003ePublisher\u003c/code\u003e in your graph is shadowed by one instance of \u003ccode\u003eSubscription\u003c/code\u003e per active \u003ccode\u003eSubscriber\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe didn\u0026rsquo;t see the effects of this shadow \u003ccode\u003eSubscription\u003c/code\u003e graph in the first \u003ccode\u003etestScan\u003c/code\u003e example because the shared \u003ccode\u003ePassthroughSubject\u003c/code\u003e tied all the subscriptions together but when we moved to using \u003ccode\u003eDeferred\u003c/code\u003e, the graphs become untied and independent and we could see the effects of multiple \u003ccode\u003eSubscription\u003c/code\u003es at the \u003ccode\u003escan\u003c/code\u003e node.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eThe accurate interpretation of Combine\u003c/strong\u003e is that values are sent and processed through a graph of \u003ccode\u003eSubscription\u003c/code\u003e instances, lazily constructed by \u003ccode\u003ePublisher\u003c/code\u003e instances on a per-subscribe basis.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe don\u0026rsquo;t usually interact with \u003ccode\u003eSubscription\u003c/code\u003e instances. \u003ccode\u003eSubscription\u003c/code\u003e instances are created automatically by \u003ccode\u003ePublisher\u003c/code\u003es when a \u003ccode\u003eSubscriber\u003c/code\u003e subscribes. The graph of \u003ccode\u003eSubscription\u003c/code\u003e instances mirrors the graph of \u003ccode\u003ePublisher\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eYou can see why the distinction between the \u003ccode\u003ePublisher\u003c/code\u003e graph and the \u003ccode\u003eSubscriber\u003c/code\u003e graph (the distinction between the \u0026ldquo;naïve\u0026rdquo; and \u0026ldquo;accurate\u0026rdquo; interpretations) can be confusing. Further adding to the confusion is that there are no usable public implementations of \u003ccode\u003eSubscription\u003c/code\u003e (I\u0026rsquo;m ignoring \u003ccode\u003eSubscriptions.empty\u003c/code\u003e which is a placeholder that ignores everything).\u003c/p\u003e\n\n\u003cp\u003eThe subscription concept was introduced by the Reactive Extensions for .NET, attempting to make each mutation of the graph behave like a completely separate, unrelated graph – as it might appear in a strict functional programming language. However, strict functional programming languages cache function results, so redundant recalculation of upstream values is avoided. In Swift, if we don\u0026rsquo;t cache it ourselves, everything is repeated.\u003c/p\u003e\n\n\u003cp\u003eIf I wanted to repeat all the processing, I would have recreated the publisher graph.\u003c/p\u003e\n\n\u003cp\u003eWhen I wrote my own reactive programming framework, CwlSignal, the main \u003ccode\u003eSignal\u003c/code\u003e instances were the delivery graph – the \u0026ldquo;naïve\u0026rdquo; interpretation was the same as the \u0026ldquo;accurate\u0026rdquo; interpretation. I handled the problem with multiple subscribers a different way: \u003ccode\u003eSignal\u003c/code\u003e nodes allowed only a single child to observe. For those specific cases where you need multiple listeners, CwlSignal offered a special \u003ccode\u003eSignalMulti\u003c/code\u003e node that encoded choices like \u0026ldquo;multicast\u0026rdquo;, \u0026ldquo;continuous\u0026rdquo; (cache latest), \u0026ldquo;playback\u0026rdquo; (cache all). But a re-subscribe option deliberately wasn\u0026rsquo;t offered.\u003c/p\u003e\n\n\u003cp\u003eIn any case, let\u0026rsquo;s look under the hood at the definition of \u003ccode\u003eSubscription\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eSubscription\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomCombineIdentifierConvertible\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003edemand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt\u0026rsquo;s pretty terse. If this is the entire definition of the shadow value sending graph, it\u0026rsquo;s not revealing much.\u003c/p\u003e\n\n\u003ch2 id=\"custom-implementations\"\u003eCustom implementations\u003c/h2\u003e\n\n\u003cp\u003eFortunately, \u003ccode\u003eSubscription\u003c/code\u003e isn\u0026rsquo;t impossible to understand. It generally just performs all the roles of the \u003ccode\u003ePublisher\u003c/code\u003e and \u003ccode\u003eSubscriber\u003c/code\u003e in the \u0026ldquo;naïve\u0026rdquo; interpretation: it receives values, processes them and passes them down the line.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003eSubscription\u003c/code\u003e should replicate everything important from its associated \u003ccode\u003ePublisher\u003c/code\u003e, copying any closures and state from the initial values stored in the \u003ccode\u003ePublisher\u003c/code\u003e. In this way, the \u003ccode\u003eSubscription\u003c/code\u003e is independent and has everything needed to handle the processing, without further assistance from the \u003ccode\u003ePublisher\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe trickiest part is working out when to create a \u003ccode\u003eSubscriber\u003c/code\u003e from a \u003ccode\u003ePublisher\u003c/code\u003e and getting everything to piece together. I arrived at the following steps, centered on \u003ccode\u003ePublisher.receive\u003c/code\u003e, after a little experimentation:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: the words \u003ccode\u003eSubscriber\u003c/code\u003e and \u003ccode\u003eSubscription\u003c/code\u003e are very similar. I\u0026rsquo;m sure this is going to get confusing (it was confusing to write).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003col\u003e\n\u003cli\u003eYou invoke Combine\u0026rsquo;s \u003ccode\u003esubscribe\u003c/code\u003e function on your \u003ccode\u003ePublisher\u003c/code\u003e, passing your \u003ccode\u003eSubscriber\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThis will call through to your \u003ccode\u003ePublisher\u003c/code\u003e\u0026rsquo;s \u003ccode\u003ereceive\u003c/code\u003e function passing the \u003ccode\u003eSubscriber\u003c/code\u003e you provided to the \u003ccode\u003esubscribe\u003c/code\u003e function\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003ereceive\u003c/code\u003e function \u003ccode\u003ePublisher\u003c/code\u003e creates a custom \u003ccode\u003eSubscription\u003c/code\u003e instance, which should also conform to \u003ccode\u003eSubscriber\u003c/code\u003e and should hold a reference to the downstream \u003ccode\u003eSubscriber\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eYour \u003ccode\u003ePublisher\u003c/code\u003e calls \u003ccode\u003esubscribe\u003c/code\u003e on its upstream \u003ccode\u003ePublisher\u003c/code\u003e (if any) passing the custom \u003ccode\u003eSubscription\u003c/code\u003e (this is why it should conform to \u003ccode\u003eSubscriber\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eThe upstream \u003ccode\u003ePublisher\u003c/code\u003e calls \u003ccode\u003ereceive\u003c/code\u003e on your custom \u003ccode\u003eSubscription\u003c/code\u003e, passing its own subscription instance.\u003c/li\u003e\n\u003cli\u003eYour \u003ccode\u003eSubscriber\u003c/code\u003e should call \u003ccode\u003ereceive\u003c/code\u003e on its downstream \u003ccode\u003eSubscriber\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe downstream \u003ccode\u003eSubscriber\u003c/code\u003e will invoke \u003ccode\u003erequest\u003c/code\u003e on your \u003ccode\u003eSubscription\u003c/code\u003e and your \u003ccode\u003eSubscription\u003c/code\u003e should invoke \u003ccode\u003erequest\u003c/code\u003e on its upstream \u003ccode\u003eSubscription\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe exact steps tend to vary based on whether your \u003ccode\u003ePublisher\u003c/code\u003e has an upstream \u003ccode\u003ePublisher\u003c/code\u003e or is a \u003ccode\u003eSubject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s focus on a transforming \u003ccode\u003ePublisher\u003c/code\u003e with an upstream \u003ccode\u003ePublisher\u003c/code\u003e, since that\u0026rsquo;s the canonical case. Such a \u003ccode\u003ePublisher\u003c/code\u003e would have a \u003ccode\u003ereceive\u003c/code\u003e function that looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFailure\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eOutput\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edownstream\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAnySubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ebehavior\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomTransformer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBehavior\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003edownstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edownstream\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprocessor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einitialState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esubscription\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomSubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebehavior\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebehavior\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eupstreamPublisher\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere\u0026rsquo;s a very important trick here: even though we are a downstream node (and could implement \u003ccode\u003eSubscriber\u003c/code\u003e for ourselves), we don\u0026rsquo;t pass ourselves to the \u003ccode\u003eupstreamPublisher\u003c/code\u003e. Instead we pass the newly constructed \u003ccode\u003eSubscription\u003c/code\u003e instance instead. This is why \u003ccode\u003eSubscription\u003c/code\u003e implementations are often \u003ccode\u003eSubscriber\u003c/code\u003e implementations too. The \u003ccode\u003eSubscription\u003c/code\u003e instances are their own, independent delivery graph, connected only to other \u003ccode\u003eSubscription\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003cp\u003eI chose to design my custom subscription in two parts: a wrapper (to apply mutex behaviors) and a behavior protocol (used to apply \u003ccode\u003ePublisher\u003c/code\u003e specific behaviors inside the mutex). The mutex wrapper is therefore implemented just once and the behavior content is simpler.\u003c/p\u003e\n\n\u003cp\u003eHere\u0026rsquo;s the wrapper interface:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eCustomSubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eContent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscriptionBehavior\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscription\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003etypealias\u003c/span\u003e \u003cspan class=\"n\"\u003eInput\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eContent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInput\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003etypealias\u003c/span\u003e \u003cspan class=\"n\"\u003eFailure\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eContent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFailure\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ecombineIdentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCombineIdentifier\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecombineIdentifier\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erecursiveMutex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eNSRecursiveLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eContent\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand the \u003ccode\u003eSubscriptionBehavior\u003c/code\u003e inside it looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eprotocol\u003c/span\u003e \u003cspan class=\"nc\"\u003eSubscriptionBehavior\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCancellable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomCombineIdentifierConvertible\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eInput\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eassociatedtype\u003c/span\u003e \u003cspan class=\"n\"\u003eOutputFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eError\u003c/span\u003e\n\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edemand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kr\"\u003eget\u003c/span\u003e \u003cspan class=\"kr\"\u003eset\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003eupstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscription\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kr\"\u003eget\u003c/span\u003e \u003cspan class=\"kr\"\u003eset\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003edownstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eAnySubscriber\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eOutputFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kr\"\u003eget\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDemand\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFailure\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe implementations are then straightforward: values arrive via the \u003ccode\u003ereceive\u003c/code\u003e functions and are processed as appropriate for the publisher that created the instance and emitted to the downstream \u003ccode\u003eAnySubscriber\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can see the full implementation of \u003ccode\u003eCustomSubject\u003c/code\u003e, \u003ccode\u003eCustomScan\u003c/code\u003e, \u003ccode\u003eCustomSubscription\u003c/code\u003e and \u003ccode\u003eCustomSink\u003c/code\u003e \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003ein the CombineExploration repository\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIs this how the implemention of \u003ccode\u003eSubscription\u003c/code\u003e looks in Combine? Almost certainly not. As far as I can tell, Combine uses a type called \u003ccode\u003eConduit\u003c/code\u003e which applies its mutex once at the start, rather than once for every \u003ccode\u003ePublisher\u003c/code\u003e stage in the pipeline. \u003ccode\u003eConduit\u003c/code\u003e does use a recursive mutex implementation (more on that in part 3 of this series) but it appears to be implemented on top of \u003ccode\u003eos_unfair_lock\u003c/code\u003e (which is usually a non-recursive mutex).\u003c/p\u003e\n\n\u003cp\u003eHowever, these implementations do appear to behave correctly and interoperate correctly with the official Combine implementations.\u003c/p\u003e\n\n\u003cp\u003eHere\u0026rsquo;s the previous \u003ccode\u003etestOverlappingABCD\u003c/code\u003e rewritten with these implementations, showing that they function as drop-in replacements for the default implementations:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etestCustomABCD\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003esubjects\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eCustomSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003edeferred\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDeferred\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003erequest\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomSubject\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;()\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003escanB\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomScan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupstream\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edeferred\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einitialResult\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkC\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003ereceivedD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSubscribers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;]()\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003esinkD\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCustomSink\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eNever\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveCompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ereceiveValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003escanB\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esinkD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"n\"\u003esubjects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.\u003c/span\u003e\u003cspan class=\"p\"\u003e..\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceivedD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003easEvents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompletion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efinished\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDownload\u003c/strong\u003e: The code for this series, \u003ca href=\"https://github.com/mattgallagher/CombineExploration\"\u003eCombineExploration, is available on github\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe frequently talk about our \u003ccode\u003ePublisher\u003c/code\u003e graphs as though they perform a calculation and emit values but this isn\u0026rsquo;t really true. Values in Combine are sent by the \u003ccode\u003eSubscription\u003c/code\u003e graph and the calculation is repeated for each \u003ccode\u003eSubscription\u003c/code\u003e graph.\u003c/p\u003e\n\n\u003cp\u003eThe distinction between \u003ccode\u003ePublisher\u003c/code\u003e and \u003ccode\u003eSubscription\u003c/code\u003e graphs exists to prevent separate subscribers from interferring with each other. For this to work, \u003cem\u003eall\u003c/em\u003e stream processing state you set up in a custom \u003ccode\u003ePublisher\u003c/code\u003e must be copied into a \u003ccode\u003eSubscription\u003c/code\u003e and mutated there, exclusively.\u003c/p\u003e\n\n\u003ch3 id=\"looking-forward\"\u003eLooking forward\u0026hellip;\u003c/h3\u003e\n\n\u003cp\u003eIn most cases, we don\u0026rsquo;t want redundant calculations. Where possible, we want values calculated once per \u003ccode\u003ePublisher\u003c/code\u003e graph and we want the latest value \u003cem\u003eshared\u003c/em\u003e between all subscribers.\u003c/p\u003e\n\n\u003cp\u003eHow do we avoid \u0026ldquo;resubscription\u0026rdquo; in Combine? How do we get multicast or cached results? Will we need to use \u003ccode\u003econnect\u003c/code\u003e or hold redundant \u003ccode\u003esubscribe\u003c/code\u003e cancellables as we do in RxSwift? For that matter, what is needed, in general, to keep Combine subscriptions alive? What are the rules by which Combine keeps anything (\u003ccode\u003ePublishers\u003c/code\u003e, \u003ccode\u003eSubscribers\u003c/code\u003e or \u003ccode\u003eSubscriptions\u003c/code\u003e) alive?\u003c/p\u003e\n\n\u003cp\u003eThis is what I\u0026rsquo;ll look at in the next article: sharing.\u003c/p\u003e\n",
            "date_published": "2019-08-16T10:16:01+10:00"
        }
        
        , {
            "title": "First impressions of SwiftUI",
            "id": "https://www.cocoawithlove.com/blog/swiftui.html",
            "url": "https://www.cocoawithlove.com/blog/swiftui.html",
            "content_html": "\n\n\u003cp\u003eA little over a month ago, \u003ca href=\"/blog/introducing-cwlviews.html\"\u003eI released CwlViews\u003c/a\u003e and then \u003ca href=\"/blog/declarative-views.html\"\u003efollowed up with an article\u003c/a\u003e suggesting that Apple might be about to release their own declarative views library. \u003ca href=\"https://developer.apple.com/wwdc19/\"\u003eAt WWDC this week\u003c/a\u003e, they did just that, \u003ca href=\"https://developer.apple.com/xcode/swiftui/\"\u003ereleasing SwiftUI\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis article will look at how SwiftUI\u0026rsquo;s approach to declarative views compares to CwlViews, why the two approaches differ and what Apple changed to make this possible. I\u0026rsquo;ll end with some thoughts about how this will affect macOS and iOS development.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"everyone-and-no-one-saw-this-coming\"\u003eEveryone and no-one saw this coming\u003c/h2\u003e\n\n\u003cp\u003eHooray, I predicted a thing. But I still managed to be surprised.\u003c/p\u003e\n\n\u003cp\u003eApple did, \u003ca href=\"https://mjtsai.com/blog/2018/05/01/scuttlebutt-regarding-apples-cross-platform-ui-project/\"\u003eas rumors suggested over a year ago\u003c/a\u003e, introduce a declarative views library. I correctly surmised that Interface Builder XML would be replaced by Swift code. I didn\u0026rsquo;t include my prediction that numerous recent Swift evolution proposals might herald integration with this library but that too was apparent.\u003c/p\u003e\n\n\u003cp\u003eHowever, I had expected the library to be a layer on top of AppKit/UIKit so almost everything else about SwiftUI took me by surprise. I mean, you don\u0026rsquo;t just casually replace frameworks with a 30 year history.\u003c/p\u003e\n\n\u003cp\u003eOf course, Apple didn\u0026rsquo;t do this on a whim and it appears that parts of SwiftUI have been in development for 7-10 years (yes, \u003ca href=\"https://twitter.com/jckarter/status/1135903779071483906\"\u003emultiple Swift components released at WWDC this year predate Swift\u003c/a\u003e). A huge number of components (across platforms, Xcode, toolchains) have been developed to support the effort. It\u0026rsquo;s possible that hundreds of developers have been involved with an effort of this scale.\u003c/p\u003e\n\n\u003ch2 id=\"swiftui-versus-cwlviews\"\u003eSwiftUI versus CwlViews\u003c/h2\u003e\n\n\u003cp\u003eHow does SwiftUI compare to my one-developer side-project?\u003c/p\u003e\n\n\u003cp\u003eSwiftUI and CwlViews have some similar goals.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eBoth are syntactically declarative, building composeable expressions.\u003c/li\u003e\n\u003cli\u003eBoth eliminate Controllers, stepping away from the Cocoa MVC pattern.\u003c/li\u003e\n\u003cli\u003eBoth have their own concept called bindings.\u003c/li\u003e\n\u003cli\u003eBoth build views in code, eliminating Interface Builder XML.\u003c/li\u003e\n\u003cli\u003eBoth can be hosted in an NS/UIView and can host NS/UIViews.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBut there\u0026rsquo;s a single, big difference between the approaches of the two: CwlViews is based around the idea of \u003cem\u003emaintaining\u003c/em\u003e the underlying behaviors of AppKit/UIKit. SwiftUI set aside most of these underpinnings and remade parts of the Swift language and Xcode IDE to support it.\u003c/p\u003e\n\n\u003ch3 id=\"quick-comparison\"\u003eQuick comparison\u003c/h3\u003e\n\n\u003cp\u003eA CwlViews constructor for a text field looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eborderStyle\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroundedRect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEquivalent code in SwiftUI looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e$\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epadding\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eborder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egray\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecornerRadius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e8.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThey are both single expression constructors hiding significant work under the hood and the onscreen appearance of both is very similar to the user. But there are many differences in approach – even in this small amount of code.\u003c/p\u003e\n\n\u003ch3 id=\"one-way-versus-two-way-bindings\"\u003eOne-way versus two-way bindings\u003c/h3\u003e\n\n\u003cp\u003eSwiftUI uses two-way bindings (the solitary \u003ccode\u003e$text\u003c/code\u003e value), versus CwlViews\u0026rsquo; dual one-way bindings (\u003ccode\u003etextFieldViewState.text\u003c/code\u003e and \u003ccode\u003etextFieldViewState.text.update()\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eOne-way bindings are largely \u003cem\u003erequired\u003c/em\u003e when interacting with \u003ccode\u003eUIKit\u003c/code\u003e views because \u003ccode\u003eUIKit\u003c/code\u003e will emit a notification whether the user interacts with the control or you set the controls value programmatically. Emitting a notification in response to programmatic changes is bothersome and requires that any binding to the control treat send and receive paths separately or you\u0026rsquo;ll get a recursive loop (set a value on the view and it immediately emits the change back to your model which re-emits that value to the view again).\u003c/p\u003e\n\n\u003cp\u003eSwiftUI clearly has different behavior at the core of its views so they emit changes only from the user, not from programmatic events. This is an example of SwiftUI fixing the underlying behaviors, rather than creating a system that works around existing behaviors. It does have some downsides (it\u0026rsquo;s harder to handle asymmetric view-logic like view-formatting and input-sanitization) but overall, two-way bindings are more concise so it\u0026rsquo;s a win.\u003c/p\u003e\n\n\u003ch3 id=\"applying-multiple-styles\"\u003eApplying multiple styles\u003c/h3\u003e\n\n\u003cp\u003eIt might not be clear but the very approach that CwlViews and SwiftUI each use for constructing the \u003ccode\u003eTextField\u003c/code\u003e (parameters to a constructor for CwlViews and chained transformations for SwiftUI) is not merely an aesthetic choice but reflects how the underlying framework functions in each case.\u003c/p\u003e\n\n\u003cp\u003eImagine if CwlViews used the same trailing transformation functions to apply properties, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eborderStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eroundedRect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo do this, CwlViews would need to mutate the \u003ccode\u003eArray\u003c/code\u003e of bindings it contained. This would mean that the Binder would need to be inherently \u003cem\u003emutable\u003c/em\u003e (which could lead to a range of correctness problems and reduced performance) or would require applying the bindings over time to the underlying view (which would lead to significantly more problems, including removing CwlView\u0026rsquo;s ability to shield the programmer from view-lifecycle and loss of testability).\u003c/p\u003e\n\n\u003cp\u003eCwlViews \u003cem\u003emust\u003c/em\u003e pass all its parameters to a single constructor because it is constructing a single immutable object.\u003c/p\u003e\n\n\u003cp\u003eSwiftUI is doing something very different. SwiftUI is not mutating a single underlying \u003ccode\u003eTextField\u003c/code\u003e. Each of the SwiftUI properties is applied to a different view. The \u003ccode\u003eTextField\u003c/code\u003e in Swift is constructed as a series of progressive wrappers with each enclosing the previous layer. Among other things, this means that you can acheive different effects by applying properties in different orders (e.g. \u003ccode\u003eborder\u003c/code\u003e then \u003ccode\u003epadding\u003c/code\u003e would put the padding \u003cem\u003eoutside\u003c/em\u003e the border, rather than inside).\u003c/p\u003e\n\n\u003cp\u003eSwiftUI performs transformations as a series of trailing actions because each one wraps the previous result.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eTextField\u003c/code\u003e example, SwiftUI is ultimately building an instace of the following type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003e_ModifiedContent\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n   \u003cspan class=\"n\"\u003e_ModifiedContent\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_PaddingLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;,\u003c/span\u003e\n   \u003cspan class=\"n\"\u003e_OverlayModifier\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eShapeView\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRoundedRectangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInsetShape\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStroked\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eColor\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDo you see the \u003ccode\u003eTextField\u003c/code\u003e in the middle, there? It\u0026rsquo;s wrapped in a padding modifier and overlayed with a stroke modifier that are applied by the two trailing transformations.\u003c/p\u003e\n\n\u003ch3 id=\"virtual-views-versus-binders\"\u003eVirtual views versus Binders\u003c/h3\u003e\n\n\u003cp\u003eIf every \u003ccode\u003eView\u003c/code\u003e in SwiftUI was heap allocated, all of these layers would be a nightmare but SwiftUI represents views as value types (typically \u003ccode\u003estruct\u003c/code\u003e instances). Stack allocated \u003ccode\u003estructs\u003c/code\u003e are extremely low cost and can be omitted by the compiler entirely, in some cases.\u003c/p\u003e\n\n\u003cdiv class=\"aside\"\u003eAn \u003cb\u003eexistential\u003c/b\u003e in Swift is a value where the compiler knows the protocol conformance of the type but not the full concrete type. Since the compiler doesn't know the runtime size, it allocates a small box for the value. If the value is bigger than the box – limit is a few 64-bit values – it must be heap allocated, even if the concrete type doesn't normally require heap allocation.\u003c/div\u003e\n\n\u003cp\u003eCwlViews is forced to be more heavy-weight. CwlViews \u003ccode\u003eBinder\u003c/code\u003es (the abstraction it uses around views) are reference (\u003ccode\u003eclass\u003c/code\u003e) types. This isn\u0026rsquo;t by choice. I originally tried writing CwlViews with \u003ccode\u003estruct\u003c/code\u003e types but there were many cases where it seemed natural to use the \u003ccode\u003eBinder\u003c/code\u003e as a proxy for the underlying view and this requires that the two have similar semantics. Additionally, since a \u003ccode\u003eBinder\u003c/code\u003e is normally passed around as an existential type (e.g. the \u003ccode\u003eViewConvertible\u003c/code\u003e protocol) there\u0026rsquo;s usually a heap allocation and a reference involved, whether you want it or not (existentials use heap allocation for anything over a few bytes).\u003c/p\u003e\n\n\u003cp\u003eCwlViews requires heap allocated references because of the one-to-one relationship between \u003ccode\u003eBinder\u003c/code\u003es and views and the use of protocols rather than concrete types.\u003c/p\u003e\n\n\u003cp\u003eMeanwhile, the \u003ccode\u003eView\u003c/code\u003e types you use in SwiftUI are quite different from the underlying views that get presented onscreen. With SwiftUI, the onscreen views have names like \u0026ldquo;overlay\u0026rdquo;, \u0026ldquo;modifier\u0026rdquo; or they may be NSViews and UIViews (yes, SwiftUI still uses NSViews and UIViews as tools in its display hierarchy). The SwiftUI \u003ccode\u003eView\u003c/code\u003es are significantly removed from these runtime types making SwiftUI \u003ccode\u003eView\u003c/code\u003es a kind of \u0026ldquo;virtual-view\u0026rdquo;. This separation means that there\u0026rsquo;s no expectation for SwiftUI \u003ccode\u003eView\u003c/code\u003es to behave the same way as a \u003ccode\u003eUIView\u003c/code\u003e. A value type can work.\u003c/p\u003e\n\n\u003cp\u003eOf course, SwiftUI also \u0026ldquo;cheats\u0026rdquo; relative to CwlViews by changing the Swift language to include opaque return type (i.e. \u003ccode\u003esome View\u003c/code\u003e). With opaque return types, the type signature \u003cem\u003elooks\u003c/em\u003e more like a protocol than a concrete type (e.g. \u003ccode\u003esome View\u003c/code\u003e versus \u003ccode\u003e_ModifiedContent\u0026lt;TextField, _PaddingLayout\u0026gt;\u003c/code\u003e) but the compiler always knows the true underlying type so it can make a range of optimizations including correct space allocation to keep the type on the stack rather than overflowing from an existential container onto the heap.\u003c/p\u003e\n\n\u003ch2 id=\"change-model\"\u003eChange model\u003c/h2\u003e\n\n\u003cp\u003eMentioning virtual-views brings me to the biggest surprise in SwiftUI and the biggest difference with CwlViews: the way in which changes are handled.\u003c/p\u003e\n\n\u003cp\u003eCwlViews\u0026rsquo; change model requires that you send values to your views through reactive programming bindings and your views – which are persistent mutable entities underneath the CwlViews layers – are directly mutated by the bindings. Despite the intermediate layer, you are updating the on-screen representation directly for yourself.\u003c/p\u003e\n\n\u003cp\u003eSwiftUI\u0026rsquo;s change model is a very different beast. Virtual-views like SwiftUI\u0026rsquo;s, require a specific \u0026ldquo;render\u0026rdquo; process to build the real view hierarchy and this process needs to be scheduled. Typically this requires that all changes notify the framework in some way so the framework can schedule rendering. This is why many virtual-view frameworks use a \u0026ldquo;global reducer\u0026rdquo; (a single function where all mutations to application state are applied). When the global reducer completes an invocation, it can schedule a render.\u003c/p\u003e\n\n\u003cp\u003eIn my previous article, I guessed that Apple wouldn\u0026rsquo;t use a change model as restrictive as a global reducer – and I was correct in that guess. While I\u0026rsquo;ve already seen people treat a single top-level \u003ccode\u003e@State\u003c/code\u003e variable as an ad-hoc reducer in SwiftUI, that is not the expected approach.\u003c/p\u003e\n\n\u003cp\u003eThe expected model is that each view in SwiftUI uses properties tagged with one of \u003ccode\u003e@State\u003c/code\u003e, \u003ccode\u003e@Bindable\u003c/code\u003e, \u003ccode\u003e@ObjectBinding\u003c/code\u003e or \u003ccode\u003e@EnvironmentObject\u003c/code\u003e. These attributes are Swift 5.1 \u003ca href=\"https://github.com/DougGregor/swift-evolution/blob/property-wrappers/proposals/0258-property-wrappers.md\"\u003eproperty wrappers\u003c/a\u003e that register the tagged state in a global location and track their changes to invalidate the view hierarchy and start the render process. Introducing property wrappers is another way in which SwiftUI \u0026ldquo;cheats\u0026rdquo; relative to CwlViews because it altered the Swift language to smooth out this type of registered state.\u003c/p\u003e\n\n\u003cp\u003eSince specific views are tagged, SwiftUI can track the node in the hierarchy associated with the change and avoid re-rendering parent nodes.\u003c/p\u003e\n\n\u003cp\u003eA much more surprising optimization is that SwiftUI will avoid re-rendering children that are unchanged, even when the parent nodes change. Exactly how this is done is unclear since SwiftUI \u003ccode\u003eView\u003c/code\u003es are not \u003ccode\u003eEquatable\u003c/code\u003e. At this point, it appears to me that SwiftUI performs a raw memory comparison on each child \u003ccode\u003eView\u003c/code\u003e. More investigation is required to confirm this but if true, it has significant implications for what you can – and cannot – safely do in a SwiftUI \u003ccode\u003eView\u003c/code\u003e hierarchy.\u003c/p\u003e\n\n\u003ch2 id=\"lack-of-clarity\"\u003eLack of clarity\u003c/h2\u003e\n\n\u003cp\u003e\u0026ldquo;Surprising\u0026rdquo; and \u0026ldquo;unclear\u0026rdquo; are not terms we want when exploring new APIs.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;m going to need plenty of slow, careful investigation around exactly how SwiftUI\u0026rsquo;s change model works, how SwiftUI optimizes the render-graph and how to precisely control layouts before I feel comfortable using the framework. I dread the fact that I might need to slowly step through everything in assembly just to understand what\u0026rsquo;s happening.\u003c/p\u003e\n\n\u003cp\u003eSwiftUI offers a lot of promise but it has made everyone into a novice and lack of both documentation and experts in the field are adding to the disorientation at the moment. In addition, the nature of larger declarative systems is such that API documentation will never fill-in all the details; there is too much behavior that does not manifest through the interface.\u003c/p\u003e\n\n\u003cp\u003eI hope Apple considers open-sourcing SwiftUI. It\u0026rsquo;s the only way we\u0026rsquo;ll ever get enough documentation on such a complex framework. Until that happens, the SwiftUI community is going to be full of programmers with inaccurate superstitions about how fuctionality works, avoiding useful parts of the design because they simply don\u0026rsquo;t have knowledge about the rules that drive it.\u003c/p\u003e\n\n\u003cp\u003eWould Apple ever open-source SwiftUI? Based on the history of Apple UI frameworks, the answer would be a firm \u0026ldquo;no\u0026rdquo;. However, expectations have changed dramatically in the last 10 years and Apple\u0026rsquo;s UI frameworks are now the \u003cem\u003elast\u003c/em\u003e bastion of closed source in the world of application frameworks. Android, web and now \u003cem\u003eWindows\u003c/em\u003e all open source their application frameworks. Keeping SwiftUI closed source would be a competitive disadvantage.\u003c/p\u003e\n\n\u003ch2 id=\"where-does-all-this-leave-cwlviews\"\u003eWhere does all this leave CwlViews?\u003c/h2\u003e\n\n\u003cp\u003eSwiftUI has effectively superceded CwlViews for iOS 13, macOS 10.15 and beyond. CwlViews had a good month. 😄\u003c/p\u003e\n\n\u003cp\u003eIf you need to target iOS 10 to 12 or macOS 10.11 to 10.14, you\u0026rsquo;re welcome to use CwlViews. I think it\u0026rsquo;s much better than using AppKit or UIKit directly but if you want new features in future, you\u0026rsquo;ll need to maintain the project for yourself. But don\u0026rsquo;t worry, CwlViews \u003cem\u003eis\u003c/em\u003e open source.\u003c/p\u003e\n\n\u003cp\u003eRumors offered a more-than-one-year tip-off that declarative views was the likely direction Apple would take. I continued with CwlViews through to release since I enjoyed the experiments with application design, state management and API design. I also wasn\u0026rsquo;t sure what Apple\u0026rsquo;s timeline would be or whether Apple\u0026rsquo;s declarative views would cover all the same situations that CwlViews covered. It would have been nice if the library itself had a greater life beyond experimentation but there\u0026rsquo;s no point complaining that technology keeps changing.\u003c/p\u003e\n\n\u003cp\u003eSwiftUI starts with a better representation than the \u003ccode\u003eNSView\u003c/code\u003e/\u003ccode\u003eUIView\u003c/code\u003e that underpin CwlViews. This is the final way that it \u0026ldquo;cheats\u0026rdquo; relative to CwlViews – even if the surface description is similar, SwiftUI is playing very different game. SwiftUI views describe structure and intent but limit details unless required, allowing the framework to fill-in context and platform-specific details as needed. This lets SwiftUI operate in a multiplatform manner. And of course, SwiftUI features interactive integration with Xcode, making the editing experience responsive and enjoyable.\u003c/p\u003e\n\n\u003cp\u003eCwlViews had much smaller ambitions so it achieves significantly less. Not bad for a single-person side project but it\u0026rsquo;s nowhere near the massive effort that SwiftUI has likely been (and will continue to be).\u003c/p\u003e\n\n\u003cp\u003eMy CwlSignal library is probably deprecated now, too. This is more sad to me. I haven\u0026rsquo;t taken a close look at Combine but the WWDC presentation and API documentation imply that Combine is a conventional implementation of reactive programming (offering subjects and independently evaluated sequences). CwlSignal used a different model (asynchronous message passing through a shared graph of actor-like nodes) which enabled re-entrant sending, multi-threaded graph manipulation during signal sending, synchronous delivery of cached values and activation/deactivation events. These concepts are likely to get left behind but they were great.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;m hardly the only developer to be impacted by changes this year: everyone with a reactive programming framework, package manager, or \u003cem\u003eanything\u003c/em\u003e tied to UIKit or AppKit is in a tough spot. \u003ca href=\"https://www.objc.io/books/app-architecture/\"\u003eI wrote a book on App Architecture last year\u003c/a\u003e, largely based upon UIKit; I don\u0026rsquo;t know if it needs an update or a sequel but books focussing on UIKit aren\u0026rsquo;t likely to be the future. I have friends with commercial libraries and developer tools reliant on aspects of UIKit and AppKit that are wondering if anything can be salvaged or if they\u0026rsquo;ll have to cut their losses and move on.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSwiftUI, Combine and other changes like Swift Package Manager in Xcode are all big disruptions announced at WWDC this year.\u003c/p\u003e\n\n\u003cp\u003eLong term, SwiftUI will be good but it\u0026rsquo;s going to be years of transition before most projects have a minimum deployment target of iOS 13 or macOS 10.15. As with the first year or two of Swift development, I expect a lot of hastily started, poorly implemented and quickly forgotten projects. The SwiftUI implementation, its API and associated tooling are likely to change rapidly as serious bugs and gaping holes are patched.\u003c/p\u003e\n\n\u003cp\u003eI hope Apple open source SwiftUI – to aid understanding, promote developer confidence and enable the possibility of SwiftUI outside Apple platforms. But I won\u0026rsquo;t hold my breath for an official answer, even though the Swift language and every major UI framework on every other platform have all shown the benefits.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;m sad that two of my biggest open-source projects are largely deprecated but that\u0026rsquo;s the way things go.\u003c/p\u003e\n\n\u003ch3 id=\"addendum-what-happens-to-the-name-cocoa\"\u003eAddendum: what happens to the name \u0026ldquo;Cocoa\u0026rdquo;?\u003c/h3\u003e\n\n\u003cp\u003eIs the name \u0026ldquo;Cocoa\u0026rdquo; deprecated for describing iOS/macOS UI development?\u003c/p\u003e\n\n\u003cp\u003eWe can write a program without linking the \u0026ldquo;Cocoa.framework\u0026rdquo; but that was always true since \u0026ldquo;Cocoa.framework\u0026rdquo; was only ever a wrapper for \u0026ldquo;AppKit.framework\u0026rdquo;, \u0026ldquo;Foundation.framework\u0026rdquo; and a few others. iOS development never had a framework with \u0026ldquo;Cocoa\u0026rdquo; in the name but was still officially called \u0026ldquo;Cocoa Touch\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026rsquo;s not as though the NeXTStep derived Objective-C classes are going to be wholly replaced any time soon. Even excluding Foundation, SwiftUI replaces only \u003cem\u003esome\u003c/em\u003e Objective-C user-interface classes. Many, like \u003ccode\u003eNSApplication\u003c/code\u003e and \u003ccode\u003eUIApplication\u003c/code\u003e remain required, while others, like \u003ccode\u003eUINavigationController\u003c/code\u003e and \u003ccode\u003eNSButton\u003c/code\u003e are used internally by SwiftUI.\u003c/p\u003e\n",
            "date_published": "2019-06-08T11:39:39+10:00"
        }
        
        , {
            "title": "Declarative Views",
            "id": "https://www.cocoawithlove.com/blog/declarative-views.html",
            "url": "https://www.cocoawithlove.com/blog/declarative-views.html",
            "content_html": "\n\n\u003cp\u003eIn the previous article, I released CwlViews. Its key feature is a unique take on \u0026ldquo;declarative views\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eMost\u003c/em\u003e modern approaches to view frameworks use some form of declarative view construction. This has slowly evolved from serialization (like Storyboards), through data bindings to more modern approaches which make views into a \u0026ldquo;declarative system\u0026rdquo;. In fact, for the last couple of years, a persistent rumor claims that Apple themselves plan to release a new declarative view framework for Cocoa.\u003c/p\u003e\n\n\u003cp\u003eIn this article, I\u0026rsquo;ll look at the the biggest problem with non-declarative views and how frameworks have slowly become more declarative, over time. I\u0026rsquo;ll take a guess at what approach a declarative view framework from Apple might use – although keep in mind, I have zero insider knowledge and there\u0026rsquo;s only a month before WWDC proves how wrong I am.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"lifecycle-is-the-worst-aspect-of-imperative-programming\"\u003eLifecycle is the worst aspect of imperative programming\u003c/h2\u003e\n\n\u003cp\u003eIn my article on CwlLayout, \u003ca href=\"/blog/cwllayout.html#declarative-programming\"\u003eI stated the following\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e[In a declarative system]\u003c/em\u003e rules and relationships cannot be changed during the lifetime of the system (they are invariant), so any dynamic behavior in the system must be part of the description from the beginning.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhen I was relatively new to application programming, I didn\u0026rsquo;t understand this mindset. Applications are highly changeable systems and trying to describe them using \u0026ldquo;invariant\u0026rdquo; rules seemed impossible. I thought that imperative programming was therefore better for managing change.\u003c/p\u003e\n\n\u003cp\u003eExcept that \u003cem\u003eour programs themselves are invariant\u003c/em\u003e. The code is fixed before the program is executed. Just because code is invariant, doesn\u0026rsquo;t make it less capable of describing and handling a changeable system.\u003c/p\u003e\n\n\u003cp\u003eA better way to think about imperative versus declarative is not to focus on \u0026ldquo;invariant\u0026rdquo; but instead to focus on timing, conditions and checkpoints:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eImperative\u003c/strong\u003e: you run the system to the next lifecycle checkpoint and then you read state of the system, looking for specific conditions, running your code if one of those conditions are discovered\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeclarative\u003c/strong\u003e: you load your handlers and their conditions into the system before starting and the system runs itself to completion, calling your handlers if their conditions are met at any point\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eImperative often feels easier because if you know one broadly useful checkpoint, you can set a breakpoint there, inspect the variables on the stack at that time and try to correct every value that doesn\u0026rsquo;t match what you want it to be. Programming solved!\u003c/p\u003e\n\n\u003cp\u003eThe problem is that this type of inspect-and-set programming needs to be performed at exactly the right point in the lifecycle. You can\u0026rsquo;t make decisions if the values you need to check aren\u0026rsquo;t available or are going to change further. Similarly, it\u0026rsquo;s no good setting a property if the very next lifecycle event is going to overwrite the change.\u003c/p\u003e\n\n\u003cp\u003eTo see how tricky choosing the right moment can be, let\u0026rsquo;s look at the standard view-lifecycle checkpoints in Cocoa. All of these are involved when segueing to a new \u003ccode\u003eUIViewController\u003c/code\u003e in an iOS app:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.init\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.prepare(for:sender:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.loadView()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.init\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.awakeFromNib()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewDidLoad(_:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewWillAppear(_:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.didAddSubview()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.willMove(toSuperview:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.willMove(toWindow:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.didMoveToWindow()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.didMoveToSuperview()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.updateConstraints()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.updateViewConstraints()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewWillLayoutSubviews()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIView.layoutSubviews()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewSafeAreaInsetsDidChange()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewLayoutMarginsDidChange()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewDidLayoutSubviews()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUIViewController.viewDidAppear(_:)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese lifecycle events relate solely to the construction and presentation lifecycle of a view. This doesn\u0026rsquo;t cover state restoration, drawing, interaction, post-presentation animation or data update lifecycles.\u003c/p\u003e\n\n\u003cp\u003eNeeding to understand all of these lifecycle events – what data is available at each point and what properties can be safely set – is a loaded shotgun pointed at the feet of every Cocoa programmer. Even if you think you understand all these functions, eventually, you\u0026rsquo;ll shoot yourself in the foot. There\u0026rsquo;s too much to consider and the inner workings of Cocoa aren\u0026rsquo;t really documented. You mostly learn what can and cannot be safely done by screwing up.\u003c/p\u003e\n\n\u003ch2 id=\"declarative-instead\"\u003eDeclarative instead\u003c/h2\u003e\n\n\u003cp\u003eIn a declarative system, all of this goes away because your rules are always true. The lifecycle still occurs but you don\u0026rsquo;t need to make decisions based upon it. Your rules will be applied automatically, at the best possible time.\u003c/p\u003e\n\n\u003cp\u003eSince you don\u0026rsquo;t need to understand how the declarative system works, you\u0026rsquo;re not as dependent upon its minor details. Fewer dependencies make code easier to abstract and consequently, you can make improvements at every level.\u003c/p\u003e\n\n\u003cp\u003eWithout lifecycle, there is still complexity. You still need to handle presentation logic and interaction logic. You still need to manage state. But you don\u0026rsquo;t need to go back to the view you\u0026rsquo;ve already built and correct its properties.\u003c/p\u003e\n\n\u003ch2 id=\"the-trend-towards-declarative\"\u003eThe trend towards declarative\u003c/h2\u003e\n\n\u003cp\u003eOver the last 30 years, I see views as having evolved towards being more declarative along the following progression:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eXML in Cocoa Storyboards\u003c/li\u003e\n\u003cli\u003eViews and bindings described in XML, like .NET XAML\u003c/li\u003e\n\u003cli\u003eDeclarative code construction\u003c/li\u003e\n\u003cli\u003eImmutable virtual views, emitted from a reducer, like The Elm Architecture\u003c/li\u003e\n\u003cli\u003eViews and bindings in immutable structures, like CwlViews\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"xml-in-cocoa-storyboards\"\u003eXML in Cocoa Storyboards\u003c/h3\u003e\n\n\u003cp\u003eInterface Builder has always been declarative. Recent versions use XML but the overall premise is the same in binary-format NeXTSTEP Interface Builder (NIB) files and the Lisp files used by ExperLisp (Interface Builder\u0026rsquo;s ancestor) before that.\u003c/p\u003e\n\n\u003cp\u003eModern Storyboards XML looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;viewController\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;BYZ-38-t0r\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ecustomClass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ViewController\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ecustomModuleProvider=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;target\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;view\u003c/span\u003e \u003cspan class=\"na\"\u003ekey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;view\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003econtentMode=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;scaleToFill\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;8bC-Xf-vdC\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;rect\u003c/span\u003e \u003cspan class=\"na\"\u003ekey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;frame\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0.0\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0.0\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;375\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;667\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;autoresizingMask\u003c/span\u003e \u003cspan class=\"na\"\u003ekey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;autoresizingMask\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidthSizable=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;YES\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eheightSizable=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;YES\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;viewLayoutGuide\u003c/span\u003e \u003cspan class=\"na\"\u003ekey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;safeArea\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;6Tk-OE-BBY\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/view\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/viewController\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile XML is technically declarative (it defines a hierarchical relationship), the view objects constructed do not form a declarative system and rely on significant imperative work to establish any behaviors or data relationships.\u003c/p\u003e\n\n\u003cp\u003eReally, this is the baseline. Almost all declarative approaches can improve upon this.\u003c/p\u003e\n\n\u003ch3 id=\"views-and-bindings-described-in-xml\"\u003eViews and bindings described in XML\u003c/h3\u003e\n\n\u003cp\u003eThis is a fragment of .NET XAML:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;TextBox\u003c/span\u003e\n   \u003cspan class=\"na\"\u003eHeight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;23\u0026#34;\u003c/span\u003e\n   \u003cspan class=\"na\"\u003eMargin=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;174,46,12,0\u0026#34;\u003c/span\u003e\n   \u003cspan class=\"na\"\u003eText=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{Binding Path=username}\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe big difference here over Storyboard XML is the the \u003ccode\u003e{Binding Path=username}\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWithin braces, XAML embeds a template language. Since this template language is purely functional, capable of transformations, loading resources, reorganizing the view hierarchy and other work, it can smooth over some aspects of lifecycle and configuring, without exposing lifecycle complications.\u003c/p\u003e\n\n\u003cp\u003eHowever, this template language is very cryptic and difficult to use. There\u0026rsquo;s no debugging, stack traces are useless and it\u0026rsquo;s usually best left as simple getter/setter bindings.\u003c/p\u003e\n\n\u003cp\u003eCocoa Bindings, available on macOS and Data Bindings on Android offer \u003cem\u003esome\u003c/em\u003e of the same capabilities.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eBenefits\u003c/strong\u003e: basic data lifecycle relationships are established.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDrawbacks\u003c/strong\u003e: not a complete declarative system in most cases – there are usually many lifecycle-dependent followups required to handle logic that isn\u0026rsquo;t easily captured by simple bindings. Limited ability to restructure based on parameters and data. Cryptic and hard to debug.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"declarative-construction-in-code\"\u003eDeclarative Construction in Code\u003c/h3\u003e\n\n\u003cp\u003eHistorically, some programmers have preferred data-formats like XML on the grounds that they reduce the amount of code in the program and hence make the program easier to maintain.\u003c/p\u003e\n\n\u003cp\u003eMore recently, this interpretation of data-formats has changed. Data-formats do not really reduce the amount of code in the program because they themselves \u003cem\u003eare\u003c/em\u003e code. The XML format used by Interface Builder is really code that can\u0026rsquo;t be parametrically driven, can\u0026rsquo;t easily share definitions from the rest of the project and introduces a number of potential runtime failure cases because it is not validated against definitions across the project by the compiler.\u003c/p\u003e\n\n\u003cp\u003eFor use entirely within a single project, programmers have started to favor code that is structurally similar to XML but is written in the same language as the rest of the project.\u003c/p\u003e\n\n\u003cp\u003eThe following example isn\u0026rsquo;t possible at the moment, but would be possible if Cocoa classes were given declarative constructors (constructors that can build and set all relationships without needing multiple steps, subclasses, delegates, data sources and lifecycle stages to configure).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eUIViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;My view controller\u0026#34;\u003c/span\u003e\n   \u003cspan class=\"n\"\u003eview\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIStackView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eaxis\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evertical\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003earrangedSubviews\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eUILabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;A static table\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eUITableView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eUITableViewCell\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003econtentView\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUILabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Row 1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n               \u003cspan class=\"p\"\u003e),\u003c/span\u003e\n               \u003cspan class=\"n\"\u003eUITableViewCell\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003econtentView\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUILabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Row 1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n               \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis allows initial construction to be vastly simpler and more aesthetic in code. You can also use parameters, functions and other standard programming techniques to change the structure of the view based on data – allowing for much better reuse.\u003c/p\u003e\n\n\u003cp\u003eThis type of programming avoids holding reference to elements in the middle of the hierarchy, so there needs to be careful consideration to avoid programming that \u003cem\u003erequires\u003c/em\u003e references (like building autolayout constraints). In my opinion though, this careful consideration results in significant improvements in usability and correctness.\u003c/p\u003e\n\n\u003cp\u003eThe effect is very similar to what CwlViews enables minus \u003ca href=\"/blog/a-view-construction-syntax.html\"\u003ethe syntactic tricks CwlViews uses to handle inheritance and aribtrary argument ordering\u003c/a\u003e. All of these points must also be carefully considered. And without reactive programming, you still need to set up various effects over the lifecycle of the view to handle dynamic presentation changes and interaction logic.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eBenefits\u003c/strong\u003e: better construction aesthetics, can be data-driven for better flexibility, minimal changes required relative to existing Cocoa.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDrawbacks\u003c/strong\u003e: doesn\u0026rsquo;t handle any dynamic behaviors so there\u0026rsquo;s still significant management required over the lifecycle of the views.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"immutable-virtual-views\"\u003eImmutable virtual views\u003c/h3\u003e\n\n\u003cp\u003eThe Elm Architecture, React, Flutter and other frameworks popularized another approach: immutable virtual views.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ca href=\"https://www.objc.io/books/app-architecture/\"\u003eApp Architecture\u003c/a\u003e book I wrote with \u003ca href=\"https://twitter.com/chriseidhof\"\u003eChris Eidhof\u003c/a\u003e and \u003ca href=\"https://twitter.com/floriankugler\"\u003eFlorian Kugler\u003c/a\u003e, we showed an implementation of The Elm Architecture. This is a virtual view constructed in that code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;.\u003c/span\u003e\u003cspan class=\"n\"\u003estackView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eviews\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estackView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eviews\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estackView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eviews\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etimeString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003efont\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epreferredFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eforTextStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etimeString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eduration\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003efont\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epreferredFont\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eforTextStyle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eaxis\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehorizontal\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eslider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eprogress\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n         \u003cspan class=\"bp\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eduration\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eonChange\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe stack views, the labels, the slider and the space are all immutable structs, built using the \u003ccode\u003eposition\u003c/code\u003e and \u003ccode\u003eduration\u003c/code\u003e values on \u003ccode\u003eself\u003c/code\u003e (an immutable \u003ccode\u003ePlayerState\u003c/code\u003e). The idea is that if everything is immutable, then there\u0026rsquo;s no lifecycle or change problems. You build some views and everything just \u003cem\u003eis\u003c/em\u003e. Since this view construction is in code, it is much more flexible than XML, it is data-driven and can restructure itself entire, based on that data, if it chooses.\u003c/p\u003e\n\n\u003cp\u003eThese types of system can\u0026rsquo;t just hook up bindings or allow imperative code – they\u0026rsquo;re immutable, so bindings or imperative code can\u0026rsquo;t do anything. Instead, this type of system must use a different way to handle change: totally recreating the view hierarchy on every frame.\u003c/p\u003e\n\n\u003cp\u003eThis gets to the concept of \u0026ldquo;virtual views\u0026rdquo;. Virtual views are a description of the structure and properties in a view hierarchy but they are not the views themselves (so they don\u0026rsquo;t allocate graphics resources, don\u0026rsquo;t have identity onscreen and are intended to be very light and throwaway). To translate virtual views into on-screen elements, a \u0026ldquo;diffing\u0026rdquo; system must traverse the previous virtual view description and the new virtual view description, determine what has changed and allocate or update only those views which are different.\u003c/p\u003e\n\n\u003cp\u003eSince a new virtual view system must be emitted on each change, the diffing system typically owns all view-state in the program. This is normally done through a single global \u0026ldquo;reducer\u0026rdquo; which handles changes with functions of the type: \u003ccode\u003e(changeMessage, oldState) -\u0026gt; (newState, sideEffectCommand)\u003c/code\u003e. All your changes – like the \u003ccode\u003e.seek\u003c/code\u003e and \u003ccode\u003e.togglePlay\u003c/code\u003e messages in the code, above – are change messages that must be understood and handled by this reducer.\u003c/p\u003e\n\n\u003cp\u003eFrameworks usually smooth out the change management, so its global nature is less cumbersome, but it usually still remains behind all your actions.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eBenefits\u003c/strong\u003e: Eliminates lifecycle concerns. Code is simple to read. State management has strong, clear rules.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDrawbacks\u003c/strong\u003e: State management is highly constrained and largely out of your control (you \u003cem\u003emust\u003c/em\u003e use the global reducer). Heavily reliant on diffing (which might not correctly detect your changes). May need to retraverse your entire view-state and rebuild the virtual views on every frame (rebuilding the virtual views is cheap but not free).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"views-and-bindings-in-immutable-structures\"\u003eViews and bindings in immutable structures\u003c/h3\u003e\n\n\u003cp\u003eCwlViews is intended to look a lot like virtual views (the Binder structures it creates are immutable like virtual views) but instead of needing to re-render the entire view on each change, changes are handled through bindings. Unlike XAML/Cocoa/Data bindings, these bindings aren\u0026rsquo;t limited to data changes but can completely manage the entire view hierarchy.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etextFieldView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eViewConvertible\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eborderStyle\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroundedRect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe advantage over Cocoa/XAML/Data bindings is that CwlViews is far more flexible and debuggable (since it is regular Swift code) and far more capable.\u003c/p\u003e\n\n\u003cp\u003eThe advantage over an immutable virtual views approach is that it is not reliant on any large global reducer or diffing approach. You remain in control over the data and change pipelines and there is a theoretically much lower overhead on changes.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eBenefits\u003c/strong\u003e: Eliminates lifecycle concerns. Capable and flexible. Not reliant on global reducer. Not reliant on diffing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDrawbacks\u003c/strong\u003e: Reactive programming is not universally popular and can be tricky to debug.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"what-would-apple-use\"\u003eWhat would Apple use?\u003c/h2\u003e\n\n\u003cp\u003eWith Swift 5 introducing ABI stability and Swift 5.1 expected to bring module stability, Swift is finally mature enough that I expect Apple to start shipping Swift frameworks as part of the operating system. I don\u0026rsquo;t expect any radical overhaul of Cocoa but I do expect something steps that will start to smooth out the Swift experience in Cocoa.\u003c/p\u003e\n\n\u003cp\u003eIn 2018 when the name \u0026ldquo;Marzipan\u0026rdquo; first leaked, \u003ca href=\"https://mjtsai.com/blog/2018/05/01/scuttlebutt-regarding-apples-cross-platform-ui-project/\"\u003ethere were numerous references by different bloggers\u003c/a\u003e to a separate, unrelated project, supposedly a \u0026ldquo;declarative\u0026rdquo; UI framework for UIKit and macOS. Following a \u003ca href=\"https://twitter.com/markgurman/status/991369046628225025\"\u003etweet by Mark Gurman\u003c/a\u003e, most people have referred to it as \u0026ldquo;Amber\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eAs much as I hate to engage in rumor speculation, it\u0026rsquo;s important to be ready for changes that might realistically affect iOS and macOS development.\u003c/p\u003e\n\n\u003cp\u003eIf Apple were to introduce a new \u0026ldquo;declarative view construction framework\u0026rdquo; at WWDC this year, what would it be? I see three possible answers:\u003c/p\u003e\n\n\u003ch3 id=\"minimal-declarative-changes\"\u003eMinimal declarative changes\u003c/h3\u003e\n\n\u003cp\u003eThe simplest action for Apple would be to adopt declarative construction in code for views. This wouldn\u0026rsquo;t be zero effort – as I said, many interfaces need to be rethought to allow relationships to be established without using references – but it wouldn\u0026rsquo;t conflict with existing code and wouldn\u0026rsquo;t require changing any underlying behaviors in Cocoa.\u003c/p\u003e\n\n\u003cp\u003eIf these Swift wrappers were written carefully, they could abstract away iOS and macOS differences. Realistically though, eliminating differences between iOS and macOS will require changes in the underlying objects themselves. However, Apple have shown a desire to better integrate between iOS and macOS so I wouldn\u0026rsquo;t be surprised to see AppKit and UIKit classes co-evolve to increase similarity and support this idea.\u003c/p\u003e\n\n\u003ch3 id=\"swift-storyboards\"\u003eSwift Storyboards\u003c/h3\u003e\n\n\u003cp\u003eMany of the rumors around declarative AppKit/UIKit have referenced Swift and Interface Builder. So let\u0026rsquo;s apply a little wishful thinking to that space.\u003c/p\u003e\n\n\u003cp\u003eStoryboards could entirely replace XML with programmatically generated and managed Swift. Parsing Swift using libSyntax could replace parsing XML. All of the same structures used in XML could be expressed in Swift. With a little construction interface rethinking, you could eliminate the computer-generated \u003ccode\u003eid\u003c/code\u003e tags that make the XIB XML format annoying to read and make the entire experience user-readable and (optionally) hand-editable.\u003c/p\u003e\n\n\u003cp\u003eWith a file-format that uses Swift, Interface Builder could offer numerous Swift integration advantages, directly importing definitions from the remainder of the program and exporting Interface Builder definitions as Swift definitions.\u003c/p\u003e\n\n\u003cp\u003eExporting definitions (like colors, localized strings and image resources) from Interface Builder could finally replace the horrible stringly-typed experience for assets with typesafe generated definitions (something other platforms have had for decades).\u003c/p\u003e\n\n\u003cp\u003eStoryboards could even embed user code to conditionally build or change parts of the hierarchy. Using a real programming language for Interface Builder would bring it back to its roots when it was incrementally compiled LISP code, rather than a serialization format.\u003c/p\u003e\n\n\u003cp\u003eFinally, the Swift declarative construction code used to replace the XML would be usable outside the Interface Builder files. In essence, this option would be a superset of the \u0026ldquo;Minimal declarative changes\u0026rdquo; approach, described above.\u003c/p\u003e\n\n\u003ch3 id=\"apple-s-own-reducer-and-virtual-views\"\u003eApple\u0026rsquo;s own reducer and virtual views\u003c/h3\u003e\n\n\u003cp\u003eI do not see Apple embracing a reactive programming dependent library like CwlViews. Reactive programming just isn\u0026rsquo;t popular enough.\u003c/p\u003e\n\n\u003cp\u003eFrom my perspective then, if Apple wanted to try a wholly declarative system, the only other approach in common usage would be to use virtual views and a global view-state reducer.\u003c/p\u003e\n\n\u003cp\u003eIn support of this idea is that Elm, Flutter, React and others have already shown that it can work so it would be easy to see as a \u0026ldquo;proven\u0026rdquo; approach to improvement change management, reusability and separation of concerns. However, Elm, Flutter and React are all decidedly more \u0026ldquo;web-inspired\u0026rdquo; than anything in Cocoa and all rely on language virtual machines and heavy-weight layout engines.\u003c/p\u003e\n\n\u003cp\u003eI think this might be too big a change for Apple and too opinionated for a general purpose framework.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere\u0026rsquo;s a big difference between \u0026ldquo;declarative construction\u0026rdquo; (syntax) and a \u0026ldquo;declarative system\u0026rdquo; (a system where rules and relationships are fixed for the whole lifetime).\u003c/p\u003e\n\n\u003cp\u003eCocoa has \u003cem\u003ealways\u003c/em\u003e had \u0026ldquo;declarative construction\u0026rdquo; via NIB/XIB/Storyboard files. Meanwhile though, the experience of constructing views in code has generally required a series of mutable imperative statements to assemble most views. If nothing else, declarative Swift construction code for Cocoa classes would be a nice improvement – even though syntax along won\u0026rsquo;t change much in the long run.\u003c/p\u003e\n\n\u003cp\u003eA fully declarative system is required to properly eliminate the biggest problem with imperative view programming: lifecycle. However, there are only a couple choices for fully declarative systems and the choices that do exist are far from mainstream (outside of web programming).\u003c/p\u003e\n\n\u003cp\u003eWill Apple introduce a declarative views system at WWDC this year? I have no idea. But if they did, then I think replacing XML storyboards with generated Swift – that can further embed custom Swift and import and export definitions to the rest of the program – would be ideal because it would smooth out some pain points (including bindings and customization in Storyboards) without forcing any other large changes on Cocoa developers.\u003c/p\u003e\n\n\u003cp\u003eObviously, I wrote CwlViews so I do think that Cocoa developers \u003cem\u003eshould\u003c/em\u003e try more dramatic approaches towards declarative view programming but I\u0026rsquo;m not sure the developer community has fully embraced any particular approach enough that Apple would make a serious investment.\u003c/p\u003e\n\n\u003ch3 id=\"looking-forward\"\u003eLooking forward\u003c/h3\u003e\n\n\u003cp\u003eThere are plenty of little tricks in CwlViews that I\u0026rsquo;ll want to share but first I might wait and see what \u003cem\u003eactually\u003c/em\u003e gets released at WWDC.\u003c/p\u003e\n",
            "date_published": "2019-05-03T21:57:08+10:00"
        }
        
        , {
            "title": "Introducing CwlViews",
            "id": "https://www.cocoawithlove.com/blog/introducing-cwlviews.html",
            "url": "https://www.cocoawithlove.com/blog/introducing-cwlviews.html",
            "content_html": "\n\n\u003cp\u003eCwlViews replaces the diverse collection of construction and management interfaces in Cocoa with a set of composable, declarative \u0026ldquo;binding\u0026rdquo; constructors. The result hides much of the busywork that dogs Cocoa application programming, leaving behind a highly concise, view-state driven, reactively connected experience and offers end-to-end testability.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve been slowly playing with the ideas behind CwlViews in private for 4 years. My primary use-case has been prototyping and experimentation and I\u0026rsquo;ve been loving every moment of it. I don\u0026rsquo;t know how others will respond to using CwlViews but it\u0026rsquo;s now available to try. It\u0026rsquo;s not an exaggeration to call it a profoundly different way to program Cocoa applications.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTechnically, this isn\u0026rsquo;t the first release of CwlViews. A limited iOS implementation was included as part of the MAVB chapter of the \u003ca href=\"https://www.objc.io/books/app-architecture/\"\u003eApp Architecture\u003c/a\u003e book I wrote with \u003ca href=\"https://twitter.com/chriseidhof\"\u003eChris Eidhof\u003c/a\u003e and \u003ca href=\"https://twitter.com/floriankugler\"\u003eFlorian Kugler\u003c/a\u003e, last year. Fun fact: Chris helped with much of the terminology in CwlViews since the terms I initially used didn\u0026rsquo;t make sense (naming is hard).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"try-cwlviews\"\u003eTry CwlViews\u003c/h2\u003e\n\n\u003cp\u003eThe remainder of this article will provide some introductory documentation for CwlViews but if you prefer to learn by doing, then you can start by \u003ca href=\"https://github.com/mattgallagher/CwlViews\"\u003edownloading or cloning the CwlViews from its github repository\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe README file includes instructions for manual framework inclusion, Carthage or CocoaPods but the fastest way to try CwlViews is to install the Xcode templates. Once you\u0026rsquo;ve download the repository, open a Terminal and go to the \u0026ldquo;Scripts\u0026rdquo; directory in the repository and run \u003ccode\u003e./install_cwlviews_templates.swift\u003c/code\u003e. After this command completes, you can create a new iOS or macOS \u0026ldquo;CwlViews\u0026rdquo; application project from the Xcode \u0026ldquo;File\u0026rdquo; menu under \u0026ldquo;New\u0026rdquo; \u0026rarr; \u0026ldquo;Project\u0026hellip;\u0026rdquo;. There are also Playgrounds templates to quickly start a CwlViews playground.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNOTE: you can uninstall the templates by running \u003ccode\u003e./install_cwlviews_templates.swift --uninstall\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf you\u0026rsquo;re having difficulty seeing how to construct or use a particular view, you can also take a look at the CwlViewsCatalog_macOS and CwlViewsCatalog_iOS apps in the CwlViews.xcodeproj. These are macOS and iOS apps that demonstrate the basic functionality of the views.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/blog/cwlviewscatalog_macos.png\" alt=\"\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThese catalog apps are primarily a sandbox to test functionality so some examples are more complicated than necessary. For example, the Button includes a combination resizing/fading view layout animation, which is great for testing animation but bad for seeing how a button works.\u003c/p\u003e\n\n\u003ch2 id=\"what-is-cwlviews\"\u003eWhat is CwlViews?\u003c/h2\u003e\n\n\u003ch3 id=\"a-question-about-view-controllers\"\u003eA question about view controllers\u003c/h3\u003e\n\n\u003cp\u003eThe code that became CwlViews started with a simple question: why are view controllers not reusable? When you take away the application-specific code in a typical view controller, there is still a lot of structure and setup work that gets repeated across every similar view in your application.\u003c/p\u003e\n\n\u003cp\u003eCommon approaches to reuse around view controllers (and composite views and presentation models) all fail. You can achieve reuse with Controls and simple views are through object-oriented abstraction but composite view structures resist any significant attempt at this type of reuse, degrading into \u0026ldquo;God objects\u0026rdquo; and other anti-patterns, without offering any real advantages.\u003c/p\u003e\n\n\u003cp\u003eView controllers are – by unfortunate design – an intersection of view-logic, view-state and view-lifecycle, multiplied across an entire subtree of a view hierarchy. This multi-axis intersection creates a complicated problem space that is difficult to simplify or replace with a reusable abstraction.\u003c/p\u003e\n\n\u003ch3 id=\"what-cwlviews-does\"\u003eWhat CwlViews does\u003c/h3\u003e\n\n\u003cp\u003eCwlView\u0026rsquo;s primary aim is to replace composite, multi-role view constructs (including view controllers, storyboards and presentation models) and handle these roles using new constructs that focus on one role at a time. However, the aim is \u003cem\u003enot\u003c/em\u003e to force the programmer to do this. The aim is to provide tools to the programmer that \u003cem\u003ealready\u003c/em\u003e do this, all the programmer need do is use the standard toolset.\u003c/p\u003e\n\n\u003cp\u003eCwlViews implements view-logic as Bindings. View-state is abstracted through a construct called Adapters. And view-lifecycle is removed by a construct called Binders. Through these, CwlViews can entirely replace storyboards, view construction code, lifecycle management, presentation logic and observation, interaction logic and actions.\u003c/p\u003e\n\n\u003cp\u003eBy separating roles in this way, CwlViews can offer highly reusable abstractions and dramatically reduce the number of lines in your program (particularly when Storyboard lines are considered) at the same time as it makes some complex behaviors dramatically easier.\u003c/p\u003e\n\n\u003ch3 id=\"what-cwlviews-avoids\"\u003eWhat CwlViews avoids\u003c/h3\u003e\n\n\u003cp\u003eCwlViews does not change the behavior of Cocoa classes or objects. The same class names are used for CwlViews Binders (minus their \u003ccode\u003eUI\u003c/code\u003e or \u003ccode\u003eNS\u003c/code\u003e prefix). The same property, method and notification names are used but they are accessed via Bindings. Using properties, methods and notifications will have the same effect as in regular Cocoa without CwlViews.\u003c/p\u003e\n\n\u003cp\u003eCwlViews is not an \u0026ldquo;all-or-nothing\u0026rdquo; choice. CwlViews is two-way interchangeable with non-CwlViews Cocoa objects. Any CwlViews Binding which accepts a view will accept a \u003ccode\u003eViewConvertible\u003c/code\u003e (either a Cocoa view or a CwlViews Binder). Any Binder can be turned into its underlying Cocoa view (Binders are merely a lazy-constructors that build a Cocoa view). You can have one subtree in your application that uses CwlViews and another subtree that uses standard storyboards and \u003ccode\u003eUIViewController\u003c/code\u003e subclasses.\u003c/p\u003e\n\n\u003cp\u003eCwlViews does not rely on swizzling, undocumented behavior or languages other than Swift. While CwlViews does use the Objective-C runtime for object associated value storage, this is merely a convenience and there are some Binders in the CwlViews library that choose to use an Objective-C runtime independent approach instead.\u003c/p\u003e\n\n\u003cp\u003eCwlViews does not hide information – it represents behaviors in a transparent, inspectable manner. In fact, the ability to pull apart a Binder and ask what it is doing is a key part of CwlViewsTesting (the unit/interface testing library). Similar parsing and interrogation is used by multiple Binders to avoid conflicts between base and derived uses of inherited Bindings.\u003c/p\u003e\n\n\u003ch2 id=\"cwlviews-basics\"\u003eCwlViews basics\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;ve \u003ca href=\"/blog/a-view-construction-syntax.html\"\u003epreviously discussed the view-syntax behind CwlViews\u003c/a\u003e and the \u003ca href=\"/blog/mvc-without-the-c.html\"\u003e\u0026ldquo;Model-Adapter View-Binder\u0026rdquo; (MAVB) pattern it uses\u003c/a\u003e. This is a quick recap.\u003c/p\u003e\n\n\u003cp\u003eHere is small example for constructing a \u003ccode\u003eUITextField\u003c/code\u003e, setting some properties on it and tracking the text value of the field as it changes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eTextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCodableContainer\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etextFieldView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eViewConvertible\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eborderStyle\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroundedRect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis might appear to be a trivial example that you could easily replicate in standard Cocoa but the point of CwlViews is that a small amount of code hides a lot of concepts that are verbose and tricky to implement in Cocoa without library support.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s look at each part line-by-line.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eTextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCodableContainer\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is an example of a view-state struct. In MAVB, if we want to track any state associated with a view, that state is not stored in the view or a view controller but in a view-state struct, like this. View-state forms a tree that largely mirrors the view hierarchy (albeit more coarsely) and you can serialize the whole view-state tree or log its contents from the top-level view-state value.  The \u003ccode\u003eCodableContainer\u003c/code\u003e protocol enables automatic state restoration and also offers tricks like view-state logging on each change.\u003c/p\u003e\n\n\u003cp\u003eAll properties of a view-state struct should be immutable. \u003ccode\u003eTextFieldViewState\u003c/code\u003e does not directly store the \u003ccode\u003etext\u003c/code\u003e value; instead, it contains a \u003ccode\u003eVar\u003c/code\u003e which wraps the value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eVar\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis \u003ccode\u003eVar\u003c/code\u003e is an example of a \u0026ldquo;Model-Adapter\u0026rdquo;. A Model-Adapter contains a mutable value and exposes it through a reactive signal input (to update the value) and reactive signal output (to observe the value). Different Model-Adapters offer different inputs to update the stored value in different ways.\u003c/p\u003e\n\n\u003cp\u003eThis \u003ccode\u003eVar\u003c/code\u003e Adapter – the most common type of Model-Adapter for view-state – offers three inputs:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eset\u003c/code\u003e: set a new value and notify the change (default)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eupdate\u003c/code\u003e: set a new value but don\u0026rsquo;t notify\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enotify\u003c/code\u003e: emit a notification for a new temporary value without changing the persistent value\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThese inputs are the \u003ccode\u003eVar\u003c/code\u003e semantics in CwlViews but there are other library provided Model-Adapters which provide different semantics – e.g. \u003ccode\u003eTempVar\u003c/code\u003e which notifies but never stores a persistent value or \u003ccode\u003eToggleVar\u003c/code\u003e which can switch between \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e but cannot be explicitly set to a value or \u003ccode\u003eStackAdapter\u003c/code\u003e which pushes and pops values onto an internal array.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA quirk to note is that this \u003ccode\u003eVar\u003c/code\u003e is not initialized at its declaration – e.g. we do not write \u003ccode\u003elet text = Var(\u0026quot;\u0026quot;)\u003c/code\u003e – but is instead initialized in the \u003ccode\u003einit\u003c/code\u003e function. This is due to a Swift limitation: if you assign a value at declaration then the default \u003ccode\u003eDecodable\u003c/code\u003e conformance won\u0026rsquo;t be able to set its decoded value – even though \u003ccode\u003eEncodable\u003c/code\u003e has stored an encoded value.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003etextFieldView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003e_\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eTextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eViewConvertible\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eTextFieldViewState\u003c/code\u003e itself is passed as a parameter into the view construction function. The default CwlViews style employs strict dependencies-by-parameter approach (no globals, no two-phase construction). This supports the aim of high refactorability since all dependencies are clearly marked. The return type \u003ccode\u003eViewConvertible\u003c/code\u003e is a protocol; it is implemented by both \u003ccode\u003eUIView\u003c/code\u003e and \u003ccode\u003eCwlViews.View\u003c/code\u003e. This is key to ensuring two-way interoperability between views that do and don\u0026rsquo;t use CwlViews – both CwlViews and non-CwlViews variants can be supplied at any point and after construction, the difference is immediately abstracted.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis \u003ccode\u003eTextField\u003c/code\u003e is an example of a Binder. A Binder builds an underlying object and fully configures all the properties so that the underlying object is completely self-managed (you don\u0026rsquo;t need to set up future property updates, observation, delegates, actions since it is \u003cem\u003eall\u003c/em\u003e preconfigured at construction).\u003c/p\u003e\n\n\u003cp\u003eThis binder is of type \u003ccode\u003eTextField\u003c/code\u003e. A \u003ccode\u003eTextField\u003c/code\u003e will lazily construct and return a \u003ccode\u003eUITextField\u003c/code\u003e when you invoke \u003ccode\u003euiView()\u003c/code\u003e on it. If you hold onto the \u003ccode\u003eTextField\u003c/code\u003e and call \u003ccode\u003euiView()\u003c/code\u003e again, you will receive the originally constructed \u003ccode\u003eUITextField\u003c/code\u003e again.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eborderStyle\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroundedRect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is an example of a \u0026ldquo;Binding\u0026rdquo; in CwlViews. The left-hand side (the \u0026ldquo;Binding-Name\u0026rdquo;) refers to the \u003ccode\u003eborderStyle\u003c/code\u003e property of the underlying \u003ccode\u003eUITextField\u003c/code\u003e object. The right-hand side (the \u0026ldquo;Binding-Argument\u0026rdquo;) provides a value of \u003ccode\u003e.roundedRect\u003c/code\u003e. The constant \u0026ldquo;Binding-Operator\u0026rdquo; \u003ccode\u003e--\u003c/code\u003e indicates that the property will be set to this value once on construction and then will never change.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis Binding drives the underlying \u003ccode\u003etext\u003c/code\u003e property of the \u003ccode\u003eUITextField\u003c/code\u003e with a signal. The \u003ccode\u003etext\u003c/code\u003e property will get the initial and subsequent values emitted from the \u003ccode\u003etext\u003c/code\u003e var on the \u003ccode\u003etextFieldViewState\u003c/code\u003e. When a Binding uses \u003ccode\u003e\u0026lt;--\u003c/code\u003e (the signal Binding-Operator) then the Binding-Argument must be a \u003ccode\u003eSignalInterface\u003c/code\u003e (either a \u003ccode\u003eSignal\u003c/code\u003e or a type which exposes a \u003ccode\u003eSignal\u003c/code\u003e). For the \u003ccode\u003eVar\u003c/code\u003e type, it exposes its default output \u003ccode\u003eSignal\u003c/code\u003e that emits every notification (including the initial value).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etextFieldViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis Binding provides \u003ccode\u003etext\u003c/code\u003e changes from the \u003ccode\u003eUITextField\u003c/code\u003e and delivers them to the \u003ccode\u003eupdate()\u003c/code\u003e input of the \u003ccode\u003etextFieldViewState.text\u003c/code\u003e Adapter. As discussed above, the semantics of \u003ccode\u003eVar\u003c/code\u003e specify that \u003ccode\u003eupdate\u003c/code\u003e changes the persistent value \u003cem\u003ewithout\u003c/em\u003e notifying a new value. This ensures that \u003ccode\u003etextFieldViewState.text\u003c/code\u003e will receive the latest value but won\u0026rsquo;t immediately emit it back to our \u003ccode\u003e.text \u0026lt;-- textFieldViewState.text\u003c/code\u003e Binding (possibly causing an infinite loop).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003ccode\u003eupdate()\u003c/code\u003e input is a good way to break two-way feedback loops. However, sometimes you might have an external observer of state which wants to see both the model-driven values and view-driven feedback updates. This second observer can observe the \u003ccode\u003eallChanges()\u003c/code\u003e output instead of the default (notifications) output – this will ensure the second observer receives both kinds of change.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe \u003ccode\u003etextChanged()\u003c/code\u003e here does not directly refer to any property on \u003ccode\u003eUITextField\u003c/code\u003e. In CwlViews, paretheses in a Binding-Name indicate that this is a \u0026ldquo;Composite Binding-Name\u0026rdquo; (an abstraction built on top of another Binding-Name). In this case, the underlying Binding-Name is \u003ccode\u003edidChange\u003c/code\u003e (corresponding to \u003ccode\u003eUITextField.textDidChangeNotification\u003c/code\u003e). The underlying Binding-Name is a little clumsy since it provides the raw \u003ccode\u003eUITextField\u003c/code\u003e to a closure. The \u003ccode\u003etextChanged()\u003c/code\u003e composite binding extracts the latest value of the text field\u0026rsquo;s \u003ccode\u003etext\u003c/code\u003e, unwraps the optionality of that field (discarding \u003ccode\u003enil\u003c/code\u003e values) and emits the unwrapped \u003ccode\u003eString\u003c/code\u003e to the \u003ccode\u003eSignalInput\u003c/code\u003e on the right-hand side.\u003c/p\u003e\n\n\u003ch2 id=\"binder\"\u003eBinder\u003c/h2\u003e\n\n\u003cp\u003eA Binder is just a lazy constructor for an underlying object that sets values on construction and hooks up reactive signals for setting future values and receiving future changes.\u003c/p\u003e\n\n\u003cp\u003eBinder implementations take the name of their underlying UIKit or AppKit types, minus the prefix. e.g. \u003ccode\u003eView\u003c/code\u003e is the Binder for \u003ccode\u003eUIView\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003eBinder\u003c/code\u003e always implements the following \u003ccode\u003einit\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003eType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparameters\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eParameters\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebindings\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eBinding\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ebut you\u0026rsquo;re more likely to use the convenience constructor where Bindings are provided as a variable argument list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisHidden\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen you construct this \u003ccode\u003eView\u003c/code\u003e Binder, nothing happens. An array of Bindings is built but nothing is done with them.\u003c/p\u003e\n\n\u003cp\u003eAll Binders can be constructed by calling \u003ccode\u003einstance()\u003c/code\u003e on it. However, \u003ccode\u003einstance()\u003c/code\u003e requires that you know the raw type of the Binder so it\u0026rsquo;s more common to use the \u003ccode\u003eViewConvertible\u003c/code\u003e protocol function \u003ccode\u003euiView()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eview\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisHidden\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003euiView\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will construct and configure a \u003ccode\u003eUIView\u003c/code\u003e with the described properties.\u003c/p\u003e\n\n\u003cp\u003eYou can always specify the subclass for an instance constructed through a Binder.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIButton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisHidden\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf a more-specific Binder exists, it\u0026rsquo;s usually better to use the more-specific binder:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisHidden\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAside from calling the \u003ccode\u003eButton(type:)\u003c/code\u003e constructor, this \u003ccode\u003eButton\u003c/code\u003e binder implements the \u003ccode\u003euiButton()\u003c/code\u003e function to construct and return a \u003ccode\u003eUIButton\u003c/code\u003e in a type-safe way – in case you\u0026rsquo;re passing to a function or other interface that requires a \u003ccode\u003eUIButton\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can also construct Bindings as an array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ecolorBindings\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBinding\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003evisibilityBindings\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[.\u003c/span\u003e\u003cspan class=\"n\"\u003eisHidden\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eBinding\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eUIButton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebindings\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecolorBindings\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003evisibilityBindings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"useless-error-diagnostics\"\u003eUseless error diagnostics\u003c/h3\u003e\n\n\u003cp\u003eIf you ever see Swift point of the end of a Binder constructor and complain about:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eMissing argument for parameter 'bindings' in call\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eMissing argument for parameter 'parameters' in call\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eor point to the fourth parameter and complain about an\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eExtra argument in call\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ethen Swift is almost certainly wrong about the cause of the error.\u003c/p\u003e\n\n\u003cp\u003eIn these cases, what has happened is that Swift couldn\u0026rsquo;t match your code to either constructor (Bindings passed as an array or Bindings passed as a variable argument list) so it has tried to match against the bindings as array variant and failed.\u003c/p\u003e\n\n\u003cp\u003eMake sure your code has commas where needed (ensure commas between arguments and remove commas after the final argument). If that\u0026rsquo;s not the problem, break apart your Bindings into individual arrays (as shown above) and see if you can get Swift to give a better error message when it encounters the bindings one-at-a-time.\u003c/p\u003e\n\n\u003ch2 id=\"binding-variants\"\u003eBinding variants\u003c/h2\u003e\n\n\u003cp\u003eView logic in CwlViews (both presentation and interaction) is primarily expressed through Bindings.\u003c/p\u003e\n\n\u003cp\u003eTo make Bindings easier to abstract and simplify, they are classified into 5 different varieties (plus one that is built upon the others). These varieties are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConstant\u003c/strong\u003e, \u003cstrong\u003eDynamic\u003c/strong\u003e and \u003cstrong\u003eSignal\u003c/strong\u003e Bindings (the presentation logic Bindings that set values on views)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAction\u003c/strong\u003e Bindings (the interaction logic Bindings that communicate view events back to the model)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDelegate\u003c/strong\u003e Bindings (view-triggered closures used in a variety of ways)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eClearly defining variants is one of the primary ways that CwlViews reduces code duplication and makes code more concise. By clearly defining the overall structure of a variant, it is easier to replace with a reusable abstraction.\u003c/p\u003e\n\n\u003ch3 id=\"constant-bindings\"\u003eConstant Bindings\u003c/h3\u003e\n\n\u003cp\u003eThis is a property you can set on construction but cannot be changed after construction. You may only provide a constant Binding-Argument.\u003c/p\u003e\n\n\u003cp\u003eAn example is an iOS button\u0026rsquo;s \u003ccode\u003etype\u003c/code\u003e. This is a value that is provided to the \u003ccode\u003eUIButton(type:)\u003c/code\u003e initializer and cannot subsequently be changed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esystem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"value-bindings\"\u003eValue Bindings\u003c/h3\u003e\n\n\u003cp\u003eThese are the most common type of binding and represent a typical mutable property. CwlViews will let you set it with a constant value or provide a \u003ccode\u003eSignal\u003c/code\u003e that may give it an initial and/or future value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003emyViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisBlue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblue\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewhite\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that a different Binding-Operator is used (\u003ccode\u003e--\u003c/code\u003e to indicate constant and \u003ccode\u003e\u0026lt;--\u003c/code\u003e to indicate a \u003ccode\u003eSignal\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch3 id=\"signal-bindings\"\u003eSignal Bindings\u003c/h3\u003e\n\n\u003cp\u003eThese Bindings represent methods that can be invoked after construction and cannot be set with a constant value. They generally involve behaviors that should only be invoked in response to user-actions.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003eresignFirstResponder\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003emyViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubmitButtonPressed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe distinction between a Signal Binding and a Value Binding is often more informative than technical but some views in Cocoa will not respond to these method-like behaviors until the view is displayed onscreen, or have loaded their data.\u003c/p\u003e\n\n\u003ch3 id=\"action-bindings\"\u003eAction Bindings\u003c/h3\u003e\n\n\u003cp\u003eThe Bindings represent target-action behaviors or notifications from Cocoa views. While they are one of the most \u003cem\u003eimportant\u003c/em\u003e Bindings (the primary starting point for interaction logic), they are also the least numerous since a few key implementations (e.g. \u003ccode\u003eUIControl\u003c/code\u003e\u0026rsquo;s and \u003ccode\u003eNSControl\u003c/code\u003e\u0026rsquo;s target-actions) handle a large number of scenarios.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eScrollView\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003euserDidScroll\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emyViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003escrollLocation\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"composite-bindings\"\u003eComposite Bindings\u003c/h3\u003e\n\n\u003cp\u003eThe most commonly used Action-like Bindings are actually Composite Bindings. Composite Bindings are not really their own kind of Binding but are conveniences built on top of primitive Bindings underneath.\u003c/p\u003e\n\n\u003cp\u003eThe reason Composte Bindings are so common on top of Action bindings is:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eMany actions require additional parameters (e.g. the \u003ccode\u003efor:\u003c/code\u003e parameter of \u003ccode\u003eUIControl.addTarget(_:action:for:)\u003c/code\u003e) and setting these via the right-hand side Binding-Argument make things look clumsy so a parameter on the left-hand side can help aesthetics\u003c/li\u003e\n\u003cli\u003eThe Action often needs to pick up associated view-state from the view to usefully handle the interaction.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe following Composite Binding:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eSwitch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003evalueChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisOn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eswitchViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eis equivalent to the underlying Action Binding:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eSwitch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eControlActions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"n\"\u003escope\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalueChanged\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esingleTarget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eInput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e \u003cspan class=\"n\"\u003eUISwitch\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"n\"\u003ekeyPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisOn\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eswitchViewState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ebut the Composite Binding is much easier to read.\u003c/p\u003e\n\n\u003ch3 id=\"delegate-bindings\"\u003eDelegate Bindings\u003c/h3\u003e\n\n\u003cp\u003eThe final kind of Binding in CwlViews is a Delegate Binding. These usually correspond to Delegate methods, DataSource methods or other behaviors that require an immediate response. The Binding-Argument for a Delegate Binding must be a function or closure.\u003c/p\u003e\n\n\u003cp\u003eFor example, the CwlViews equivalent of \u003ccode\u003eUITableViewDataSource\u003c/code\u003e\u0026rsquo;s \u003ccode\u003etableView(_:cellForRowAt:)\u003c/code\u003e method is the \u003ccode\u003ecellConstructor\u003c/code\u003e Delegate Binding:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"n\"\u003eTableView\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;(\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etableData\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;One\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Two\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Three\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecellIdentifier\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003erowData\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;TextRow\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecellConstructor\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ereuseIdentifier\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecellData\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eTableViewCell\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003etextLabel\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"n\"\u003eLabel\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;--\u003c/span\u003e \u003cspan class=\"n\"\u003ecellData\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e.cellIdentifier\u003c/code\u003e Binding is invoked each time a new row is encountered in the single-section, three-row table.\u003c/p\u003e\n\n\u003cp\u003eIf no reusable rows exist with that identifier, the \u003ccode\u003e.cellConstructor\u003c/code\u003e Binding is invoked with its closure argument for each row in the single-section, three-row table, constructing the \u003ccode\u003eUITableViewCell\u003c/code\u003e as required.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn CwlViews, \u003ccode\u003eTableView\u003c/code\u003e is generic over its \u003ccode\u003eRowData\u003c/code\u003e type. Additionally, the Delegate Bindings don\u0026rsquo;t correspond to \u003ccode\u003eUITableViewDataSource\u003c/code\u003e in a one-to-one fashion. Changes along data driven pathways are the only signficant area where CwlViews has chosen to break the one-to-one mapping between Bindings and underlying class behaviors. In general, Cocoa\u0026rsquo;s data source interfaces are not well suited to driving via reactive Bindings so some changes were required.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThere are two important Delegate Bindings that all CwlViews Binders accept:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadHocPrepare\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eVoid\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* do something */\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadHocFinalize\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eLifetime\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* do something */\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese Bindings give you a chance to access the underlying instance and either apply initial changes before any other Binding or final changes after any other Binding. The \u003ccode\u003eadHocFinalize\u003c/code\u003e Binding can also return a \u003ccode\u003eLifetime\u003c/code\u003e (so it can set up its own behaviors over-time that are tied to the lifetime of the constructed instance).\u003c/p\u003e\n\n\u003cp\u003eIf you have created your own view subclass with its own properties, you can use these \u003ccode\u003eadHoc\u003c/code\u003e Bindings to manage those properties, without needing to create an entire Binder for your subclass.\u003c/p\u003e\n\n\u003ch2 id=\"creating-your-own-binder\"\u003eCreating your own Binder\u003c/h2\u003e\n\n\u003cp\u003eAdhoc Bindings will handle simple cases but you might also want to create your own Binders – especially if you plan to use a class frequently.\u003c/p\u003e\n\n\u003cp\u003eCreating a Binder for your own subclasses (or Cocoa classes that aren\u0026rsquo;t covered by CwlViews) isn\u0026rsquo;t technically challenging but there is a lot of boilerplate. A trivial implementation is around 85 lines spread over 10 sections.\u003c/p\u003e\n\n\u003cp\u003eTo simplify this, one of the Xcode templates installed by the \u003ccode\u003e./install_cwlviews_templates.swift\u003c/code\u003e script is a file template named CwlViewsBinder. This will automate the ugliest parts and provides examples of the most common scenarios.\u003c/p\u003e\n\n\u003cp\u003eMost of the work a Binder does is mapping Value Binding names onto property setters so most of your Binder will look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentPage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapply\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentPage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eKeep in mind though: there are no \u0026ldquo;getter\u0026rdquo; Bindings so you must offer notifications (Action Bindings) when state changes.\u003c/p\u003e\n\n\u003ch2 id=\"adapters\"\u003eAdapters\u003c/h2\u003e\n\n\u003cp\u003eModel-Adapters manage mutable state in CwlViews. Model-Adapters in CwlViews are instances of \u003ccode\u003eAdapter\u0026lt;State: AdapterState\u0026gt;\u003c/code\u003e with the different \u003ccode\u003eState\u003c/code\u003e types determining the valid input messages, the reducer function and the notification type.\u003c/p\u003e\n\n\u003cp\u003eFor example, the typical view-state Model-Adapter, \u003ccode\u003eVar\u003c/code\u003e is a typealias for \u003ccode\u003eAdapter\u0026lt;VarState\u0026gt;\u003c/code\u003e where the \u003ccode\u003e.set\u003c/code\u003e, \u003ccode\u003e.update\u003c/code\u003e and \u003ccode\u003e.notify\u003c/code\u003e messages and the behavior in response to those messages is determined by the \u003ccode\u003eVarState\u003c/code\u003e type.\u003c/p\u003e\n\n\u003cp\u003eA majority of state – particularly view-state which tends to follow basic setter semantics – can use one of the library provided Model-Adapters. But there will certainly be cases where you want custom change/update rules and in these cases you\u0026rsquo;ll need to implement your own \u003ccode\u003eAdapterState\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere\u0026rsquo;s a custom AdapterState implementation that is primarily a settable variable but emits a notification only if the newly set value is different to the old value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eDistinctState\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eEquatable\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCodable\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;:\u003c/span\u003e \u003cspan class=\"n\"\u003ePersistentContainerAdapterState\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efeedback\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eSignalMultiInput\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;)\u003c/span\u003e\n      \u003cspan class=\"kr\"\u003ethrows\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDistinctState\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;,\u003c/span\u003e \u003cspan class=\"n\"\u003enotification\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e?)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDistinctState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003enotification\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enotification\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith larger models, observers are most likely interested in a specific \u0026ldquo;slice\u0026rdquo; of the model, rather than receiving the entire model on every change. For this reason, CwlViews also provides \u003ccode\u003eModelState\u003c/code\u003e which can be used to build Model-Adapters that efficiently emit filtered subviews of the overall model.\u003c/p\u003e\n\n\u003cp\u003eFor example, here is \u003ccode\u003eDocumentAdapter\u003c/code\u003e, the Model-Adapter which wraps the \u003ccode\u003eDocument\u003c/code\u003e model type in the CwlViews sample application:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003etypealias\u003c/span\u003e \u003cspan class=\"n\"\u003eDocumentAdapter\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAdapter\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eModelState\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAction\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChange\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003eextension\u003c/span\u003e \u003cspan class=\"nc\"\u003eAdapter\u003c/span\u003e \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eState\u003c/span\u003e \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eModelState\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAction\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChange\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kc\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eadapterState\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eModelState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n         \u003cspan class=\"n\"\u003easync\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"n\"\u003einitial\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n         \u003cspan class=\"n\"\u003eresumer\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eChange\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereload\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n         \u003cspan class=\"n\"\u003ereducer\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efeedback\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eapply\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \n   \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003erowsSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTableRowMutation\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresume\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereload\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enotification\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n         \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"n\"\u003enotification\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddedRowIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003einserted\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremovedRowIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003edeleted\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereload\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e(.\u003c/span\u003e\u003cspan class=\"n\"\u003ereload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtents\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n         \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003enone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kr\"\u003enone\u003c/span\u003e\n         \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen the underlying model is changed, the \u003ccode\u003eslice\u003c/code\u003e closure is called and produces a view of just the table row changes within the document.\u003c/p\u003e\n\n\u003cp\u003eAny \u003ccode\u003eAdapter\u003c/code\u003e built using the \u003ccode\u003eModelState\u003c/code\u003e type also offers a \u003ccode\u003esync\u003c/code\u003e method for gaining access to the model outside of the reactive pipeline – which is useful for save operations and other accesses that must be synchronous, even when the model is managed on a background thread.\u003c/p\u003e\n\n\u003ch2 id=\"testing-code-written-using-cwlviews\"\u003eTesting code written using CwlViews\u003c/h2\u003e\n\n\u003cp\u003eA key feature of CwlViews is the ability to test all of your presentation and interaction logic – including the Binding to the views themselves – in unit/interface tests. This is an improvement over typical MVC and MVVM approaches which either omit view-controllers from testing or must resort to reading the view hierarchy (unreliable) or running UI tests (slow).\u003c/p\u003e\n\n\u003cp\u003eAt test time, provided you haven\u0026rsquo;t constructed the underlying Cocoa view, you can \u0026ldquo;consume\u0026rdquo; the Bindings from a Binder, parse the Bindings and use them as an interface to test your program\u0026rsquo;s logic.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eviewController\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etableViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etableState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enavState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003ebindings\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"n\"\u003eViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econsumeBindings\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eviewController\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"n\"\u003eViewController\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elatestValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebindings\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eXCTAssertEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpectedTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy sending signals to the model-adapters in examples like this, you can test the end-to-end logic in your program without missing any layers.\u003c/p\u003e\n\n\u003ch2 id=\"release-status\"\u003eRelease status\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eYou can \u003ca href=\"https://github.com/mattgallagher/CwlViews\"\u003e\u003cstrong\u003edownload CwlViews\u003c/strong\u003e\u003c/a\u003e and try it for yourself.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe first release is version number 0.1.0. I don\u0026rsquo;t generally release libraries with a pre-1.0 version number but CwlViews is a difficult project to \u0026ldquo;finish\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eI broke all my unit tests during refactorings late last year and unit tests on the latest iteration cover just 3 of the 70+ Binder classes so issues likely remain outside these tested areas. Unlike the Binders themselves, there are no templates, scripts or easy patterns to aid writing these unit tests, so it is manual and tedious. Also, while 70+ Binder classes may sound like a lot, they are split between iOS and macOS (40 iOS classes, 32 macOS classes and 6 shared classes) which still leaves plenty of other Cocoa classes that could be covered.\u003c/p\u003e\n\n\u003cp\u003eDespite those caveats, I\u0026rsquo;m happy with the status of the project so I wanted to share it. If you\u0026rsquo;re prepared to deal with the occasional failure in an untested area, the project is definitely usable.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCwlViews is probably the most personal project I\u0026rsquo;ve released on Cocoa with Love. I love writing apps within this framework and miss it when I\u0026rsquo;m at my day job writing more-conventional MVVM and MVC projects. By comparison, MVVM feels verbose (filled with incessant re-abstraction of data) while MVC feels like you must jump through plenty of hoops to achieve essential functionality and all new functionality interferes with existing functionality.\u003c/p\u003e\n\n\u003cp\u003eOf course, there are drawbacks to CwlViews. Swift offers very poor diagnostics if you make a mistake. None of the debugging tools provided with Xcode understand reactive programming flows enough to track the flow of messages through a graph. And some people just don\u0026rsquo;t want to express their programming logic through reactive programming pipelines.\u003c/p\u003e\n\n\u003ch3 id=\"looking-forward\"\u003eLooking forward\u003c/h3\u003e\n\n\u003cp\u003eCwlViews take on \u0026ldquo;declarative views\u0026rdquo; is unique but you may have heard \u0026ldquo;declarative\u0026rdquo; applied to other approaches. A long running rumor claims that Apple plan to release their own Swift framework for declarative view construction. As I write this in May 2019, it\u0026rsquo;s possible Apple could do this as soon as WWDC, next month.\u003c/p\u003e\n\n\u003cp\u003eIn the next article, I\u0026rsquo;ll look at the different interpretations of the term \u0026ldquo;declarative views\u0026rdquo; and why the overall concept is so popular in new view frameworks. I\u0026rsquo;ll also guess at what declarative improvements Apple might bring to Cocoa. Spoiler: I really don\u0026rsquo;t know.\u003c/p\u003e\n",
            "date_published": "2019-04-28T20:53:04+10:00"
        }
        
        , {
            "title": "Article updates, 2018 edition",
            "id": "https://www.cocoawithlove.com/blog/updating-for-2018.html",
            "url": "https://www.cocoawithlove.com/blog/updating-for-2018.html",
            "content_html": "\n\n\u003cp\u003eOver the last month or two, I\u0026rsquo;ve been slowly updating Cocoa with Love Swift projects and articles to Swift 4.2, Xcode 10, iOS 12 and mac OS 10.14. In a year without any massive new features or obvious changes to Swift, it\u0026rsquo;s been a lot of work.\u003c/p\u003e\n\n\u003cp\u003eAfter a quick look at pain points in moving to Xcode 10\u0026rsquo;s new build system, this article will largely be a log of changes to Cocoa with Love content, in reverse chronological order, as I go back through all my Swift articles and make sure everything\u0026rsquo;s in order.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"xcode-10-s-new-build-system\"\u003eXcode 10\u0026rsquo;s \u0026ldquo;new build system\u0026rdquo;\u003c/h2\u003e\n\n\u003cp\u003eXcode\u0026rsquo;s \u0026ldquo;new build system\u0026rdquo; was quietly included with Xcode 9 but in Xcode 10, it becomes the default build system. This means that it can\u0026rsquo;t really be ignored anymore.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, there are enough new requirements in the new build system that it has caused issues with most non-trivial projects I work on.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eI don\u0026rsquo;t want to know that there is a build system\u003c/strong\u003e: I want to create a project from a template, write code, hit Command-R and immediately see the program I wrote. Any time I become aware that there is a \u0026ldquo;build system\u0026rdquo;, it\u0026rsquo;s because my wishes have been denied and I\u0026rsquo;m already frustrated and angry.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMy builds are not complex but most of my projects have build products that require inclusion/exclusion/modification based on the selected build scheme (mock service and debug testing frameworks, release configuration files). And most open source projects have to play nicely with multiple package managers – changing paths or other settings based on environment variables. Unfortunately, these situations require \u0026ldquo;script\u0026rdquo; build steps – and suddenly, I\u0026rsquo;m acutely aware of my build system and everything that isn\u0026rsquo;t working.\u003c/p\u003e\n\n\u003ch3 id=\"aspects-of-the-build-system-that-frustrate-me\"\u003eAspects of the build system that frustrate me\u003c/h3\u003e\n\n\u003cp\u003eA few points about the \u0026ldquo;new build system\u0026rdquo; (does it have a catchier name?)  stand out since they\u0026rsquo;ve caused multiple problems:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInput xcfilelists can\u0026rsquo;t be missing on first run\u003c/li\u003e\n\u003cli\u003eNo two build phases in the entire workspace may generate the same output file\u003c/li\u003e\n\u003cli\u003eIf a non-script build step writes to a file in the build products, a script build step should \u003cem\u003enot\u003c/em\u003e further modify the file\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s important to be accurate when specifying input and output files of a build phase\u003c/li\u003e\n\u003cli\u003eXcode implicitly and aggressively creates folders in the products directory if a build step declares a subpath as an output\u003c/li\u003e\n\u003cli\u003eYou cannot use \u003ccode\u003excodebuild\u003c/code\u003e on the command-line to build to the same directory as an Xcode build that may have triggered it\u003c/li\u003e\n\u003cli\u003eIf any input files are touched during a build, the build is cancelled\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI\u0026rsquo;m not saying that these rules don\u0026rsquo;t make sense – most of them do make some sense – but they are all new requirements or rules and not all of them produce clear errors; you might just get stale or partially processed data appearing in your products directory.\u003c/p\u003e\n\n\u003cp\u003eThe one that feels the most frustrating – because it seems so unnecessary – is point 1. I want to be able to dynamically generate the list of input or output files for some build steps but it can\u0026rsquo;t be cleanly done. The input and output files must exist before any build step has run, so you can\u0026rsquo;t dynamically generate it (even though you can dynamically \u003cem\u003eupdate\u003c/em\u003e it).\u003c/p\u003e\n\n\u003cp\u003ePoint 2 – no two build phases in the entire workspace may generate the same output file – might seem like a minor problem but it has broken many of my own projects and my dependencies. I previously had multiple targets – dynamically selected – that generated the same file in different ways based on build conditions but it\u0026rsquo;s no longer allowed. I\u0026rsquo;ve also had projects that built outputs using custom build script phases but also included their project files for editing and debugging ease but this no longer works.\u003c/p\u003e\n\n\u003cp\u003ePoints 3, 4 and 5 break a surprising number of build script steps. The new build system may overwrite and replace files in the build products directory without warning. Any modifications should be made in the intermediates directory. Get the dependencies wrong though and any output that needs multiple processing step will go subtly wrong on a regular basis.\u003c/p\u003e\n\n\u003cp\u003ePoints 6 and 7 might not matter to anyone but me but they eventually led to me giving up on some of my more elaborate build shenanigans. In particular, see the \u003ca href=\"#package-manager-fetch-deprecated\"\u003ePackage Manager Fetch\u003c/a\u003e section, below.\u003c/p\u003e\n\n\u003ch2 id=\"cwlviews\"\u003eCwlViews\u003c/h2\u003e\n\n\u003cp\u003eWhile it might seem strange to have an update for a library I haven\u0026rsquo;t yet released, the reality is that I\u0026rsquo;ve already written two articles using this library:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/blog/mvc-without-the-c.html\"\u003eModel-View-Controller without the Controller\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/blog/a-view-construction-syntax.html\"\u003eA view construction syntax\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI\u0026rsquo;ve updated both of these articles to reflect the latest builds of CwlViews. In fact, the code for each article now includes full implementations of the iOS CwlViews code in a \u0026ldquo;concatenated\u0026rdquo; arrangement (the code for CwlViews is concatenated into 4 files which are dropped into the projects instead of requiring frameworks or dependencies).\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;m still working on some project templates for CwlViews (so starting quick projects is simpler) and I\u0026rsquo;m trying to set up some integration testing in library itself (refactoring passes have broken my old code for this) and once that\u0026rsquo;s in place, I\u0026rsquo;ll release the the whole project.\u003c/p\u003e\n\n\u003ch2 id=\"cwllayout\"\u003eCwlLayout\u003c/h2\u003e\n\n\u003cp\u003eI first released the CwlLayout code as a Swift playground in \u003ca href=\"/blog/cwllayout.html\"\u003eCwlLayout: a Swift wrapper around Auto Layout\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eSince its initial release, I\u0026rsquo;ve updated the CwlLayout to fix a range of bugs and potential layout problems, simplify the syntax slightly and improve the flexibility of views constrained to have the same length. I\u0026rsquo;ve also added basic animation support so that you can animate to layouts instead of merely applying them.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve updated the playground and the article with these changes. Moving forward, the official location for this code will be as part of the CwlViews library (this playground will receive only periodic updates).\u003c/p\u003e\n\n\u003ch2 id=\"compactmap\"\u003ecompactMap\u003c/h2\u003e\n\n\u003cp\u003eMy article titled \u003ca href=\"/blog/statements-messages-reducers.html\"\u003eStatements, message and reducers\u003c/a\u003e used the old \u003ccode\u003eflatMap\u003c/code\u003e function – the one that got renamed in Swift 4.1 to \u003ccode\u003ecompactMap\u003c/code\u003e. Obviously I updated that article but the \u003cem\u003enext\u003c/em\u003e article, previously titled \u0026ldquo;An aside about flatMap\u0026rdquo; no longer made sense since it was entirely about how one \u003ccode\u003eflatMap\u003c/code\u003e in the standard library was not like the others.\u003c/p\u003e\n\n\u003cp\u003eSo I\u0026rsquo;ve gone and done something weird and almost totally rewritten an old article. The new version is named \u003ca href=\"/blog/an-aside-about-flatmap-and-monads.html\"\u003eAbout flatMap, compactMap and monads\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eI don\u0026rsquo;t know if anyone\u0026rsquo;s going to read a rewritten article but I\u0026rsquo;m really happen with it. Where the old article had clunky diagrams and rushed its explanation, I think the new article looks really good, takes its time and manages the make all the important points about unwrapping, abstractions, side-effects and information hiding.\u003c/p\u003e\n\n\u003ch2 id=\"mvc\"\u003eMVC\u003c/h2\u003e\n\n\u003cp\u003eThere was no code in my \u003ca href=\"/blog/mvc-and-cocoa.html\"\u003eLooking at Model-View-Controller in Cocoa\u003c/a\u003e article but I updated all of the diagrams.\u003c/p\u003e\n\n\u003cp\u003ePreviously, diagrams on Cocoa with Love haven\u0026rsquo;t had any particular theme or aesthetic. My diagrams were drawn in a range of different programs using a range of different styles. I\u0026rsquo;ve been trying to tidy things up so while redoing the diagrams for the \u003ccode\u003ecompactMap\u003c/code\u003e article, I also redid the diagrams in this and other articles.\u003c/p\u003e\n\n\u003cp\u003eNot that these things matter to anyone else but sometimes, I need a little personal pride in my work.\u003c/p\u003e\n\n\u003ch2 id=\"package-manager-fetch-deprecated\"\u003ePackage manager fetch (deprecated)\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;ve \u003ca href=\"/blog/package-manager-fetch.html\"\u003epreviously written about using \u003ccode\u003eswift package fetch\u003c/code\u003e\u003c/a\u003e, later \u003ccode\u003eswift package resolve\u003c/code\u003e, in build script steps to dynamically resolve project dependencies and build them using \u003ccode\u003excodebuild\u003c/code\u003e without requiring a separate package manager. While I was able to migrate this approach to Xcode 10 – \u003ca href=\"https://github.com/mattgallagher/CwlSignal/tree/3d6c6d11171f93dd52d6b827da2775c9c79ba64d\"\u003esee the Sep 30 commit for CwlSignal\u003c/a\u003e – the increased fragility, the constant effort and the compromises required made me abandon the whole approach.\u003c/p\u003e\n\n\u003cp\u003eThe biggest point that frustrated me was that it is not really possible for a project like CwlSignal to build a dependency, like CwlUtils, using a custom build script phase and also include the CwlUtils project file. The new build system will complain that CwlUtils.framework can be built two different ways (through the project file and through the build script phase) even though only one of those approaches is directly referenced.\u003c/p\u003e\n\n\u003cp\u003eWithout project inclusion, debug symbols are difficult to maintain, jump to definition never works at all and maintaining both a dependency and a depender is an annoying process.\u003c/p\u003e\n\n\u003cp\u003eFor this reason, I\u0026rsquo;ve reverted the interdependent Cocoa with Love projects CwlSignal, CwlUtils, CwlPrecondition (and the upcoming CwlViews) to using git subtrees for their dependencies.\u003c/p\u003e\n\n\u003cp\u003eIf you don\u0026rsquo;t know about git subtrees, you can \u003ca href=\"https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging\"\u003eread about subtree merging in the git book\u003c/a\u003e but basically, you check out a completely separate repository into a separate branch and subfolder of a parent repository then merge its latest state into the parent repository\u0026rsquo;s master branch. Subtrees have an advantage that submodules and third party dependency managers don\u0026rsquo;t have: everything works seamlessly for the user with little more than a zip file of the git repository. Since you can reference your dependencies directly in the checkout, you can also build an Xcode project where debugging and definition symbols work smoothly.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026rsquo;s a little fussier to update repositories without help from additional tools. And it is a very \u003cem\u003ebad\u003c/em\u003e idea to perform a git rebase across a subtree merge (the subtree changes may get merged at the root of the repository instead of in the subtree\u0026rsquo;s directory). But until Xcode integrates properly with the Swift Package Manager (it\u0026rsquo;s shameful how long this is taking) it\u0026rsquo;s the least terrible option.\u003c/p\u003e\n\n\u003ch2 id=\"mines-obsoleted\"\u003eMines (obsoleted)\u003c/h2\u003e\n\n\u003cp\u003eI wrote an article about \u003ca href=\"/blog/porting-from-macos8-to-sierra.html\"\u003eCompiling a Mac OS 8 application on macOS Sierra\u003c/a\u003e. With i386 deprecated in Xcode 10, this project doesn\u0026rsquo;t compile anymore. I don\u0026rsquo;t feel any need to port this code to 64-bit – it was momentary nostalgia and isn\u0026rsquo;t really practical for anyone moving forward.\u003c/p\u003e\n\n\u003ch2 id=\"key-value-observing-deprecated\"\u003eKey-Value Observing (deprecated)\u003c/h2\u003e\n\n\u003cdiv class=\"aside\"\u003e\u003cstrong\u003eOuch\u003c/strong\u003e, three deprecated or obsoleted articles in a row. Better to clean things out and make way for new stuff! 😁\u003c/div\u003e\n\n\u003cp\u003eWhile my \u003ca href=\"/blog/key-value-observing-wrapper.html\"\u003ekey value observing wrapper\u003c/a\u003e still works, I\u0026rsquo;m deprecating it in CwlUtils. My original motivation for this class was to provide observation handling through closures and provide automatic lifecycle management.\u003c/p\u003e\n\n\u003cp\u003eSwift 4 changes to key-value observing provided handling through closures and automatic lifecycle management at the observer end. More importantly though, Swift 4 replaced string-based key-paths with type-checked key-paths. Suddenly, my string-based approach ceased to have much appeal.\u003c/p\u003e\n\n\u003cp\u003eWhile I liked the \u003ccode\u003ereason\u003c/code\u003e parameter that my class offered for notifying whether the path broke, the target deallocated or the value truly changed, this isn\u0026rsquo;t enough to justify continuing to use string key-paths. Use Swift \u003ccode\u003eKeyPath\u003c/code\u003e instead.\u003c/p\u003e\n\n\u003ch2 id=\"reactive-programming\"\u003eReactive programming\u003c/h2\u003e\n\n\u003cp\u003eMy article \u003ca href=\"/blog/reactive-programming-what-and-why.html\"\u003eWhat is reactive programming and why should I use it?\u003c/a\u003e was similarly affected by changes to Swift\u0026rsquo;s key value observing. I had an entire example that showed the old key-value observing callback function and talked about how clunky it was.\u003c/p\u003e\n\n\u003cp\u003eSwift\u0026rsquo;s new key-value observing is aesthetically much better so I had to refactor the example to highlight the other advantages of reactive programming.\u003c/p\u003e\n\n\u003cp\u003eI had never previously shared the code for the non-reactive examples. This makes it harder for people to perform one-to-one comparisons. So I\u0026rsquo;ve added all the non-reactive code to a playground in the \u003ca href=\"https://github.com/mattgallagher/CocoaWithLovePlaygrounds\"\u003eCocoa with Love Playgrounds project\u003c/a\u003e. The three pages in this playground implement the same logic that the CwlSignal playground pages implement and run the same example scenarios.\u003c/p\u003e\n\n\u003ch2 id=\"cwlsignal\"\u003eCwlSignal\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;ve continually worked on CwlSignal \u003ca href=\"/blog/cwlsignal.html\"\u003esince its original release\u003c/a\u003e. I\u0026rsquo;ve recently tagged the repository with a version 2.0.0 tag and I\u0026rsquo;ll try a little harder to avoid breaking changes in the near future.\u003c/p\u003e\n\n\u003ch3 id=\"interface-and-feature-changes\"\u003eInterface and feature changes\u003c/h3\u003e\n\n\u003cp\u003eSince version 1, there have been lots of bug fixes, refactoring and improvements, including:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eimproved Rx operator compatibility\u003c/li\u003e\n\u003cli\u003eintroduced \u003ccode\u003eSignalChannel\u003c/code\u003e for easier input and output construction in a single expression\u003c/li\u003e\n\u003cli\u003erenamed \u003ccode\u003eSignalEndpoint\u003c/code\u003e to \u003ccode\u003eSignalOutput\u003c/code\u003e (for symmetry with \u003ccode\u003eSignalInput\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003erenamed \u003ccode\u003eCancellable\u003c/code\u003e to \u003ccode\u003eLifetime\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI\u0026rsquo;ve added \u003ccode\u003ewithLatestFrom\u003c/code\u003e implementations, matched the on-error behaviors of Rx a little more closely and added \u003ccode\u003ejust\u003c/code\u003e, \u003ccode\u003eempty\u003c/code\u003e and a couple other common transforms from Rx. I have no intention of making CwlSignal into an RxSwift clone – they are based on some very different principles – but I would like the \u003cem\u003etransformations\u003c/em\u003e between stages of the two to be comprehensible between users of both frameworks.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eSignalChannel\u003c/code\u003e type is an extremely handy way to declare a \u003ccode\u003eSignalInput\u003c/code\u003e a full transformation pipeline and the \u003ccode\u003eSignalOutput\u003c/code\u003e all on a single line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-Swift\" data-lang=\"Swift\"\u003e\u003cspan class=\"c1\"\u003e// without `SignalChannel`\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nv\"\u003eoutput\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribeValues\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// with `SignalChannel`\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;.\u003c/span\u003e\u003cspan class=\"n\"\u003echannel\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"bp\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nv\"\u003e$0\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"n\"\u003esubscribeValues\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"bp\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eSignalChannel\u003c/code\u003e type is literally just a pair of \u003ccode\u003einput\u003c/code\u003e and \u003ccode\u003esignal\u003c/code\u003e values that you can transform like it\u0026rsquo;s just a \u003ccode\u003esignal\u003c/code\u003e until you get to a \u003ccode\u003esubscribe\u003c/code\u003e at which point, the both ends are returned.\u003c/p\u003e\n\n\u003cp\u003eRenaming \u003ccode\u003eSignalEndpoint\u003c/code\u003e to \u003ccode\u003eSignalOutput\u003c/code\u003e is intended to clarify its role. I originally avoided the \u003ccode\u003eSignalOutput\u003c/code\u003e name and used \u003ccode\u003eSignalEndpoint\u003c/code\u003e instead because the implementation is so different to \u003ccode\u003eSignalInput\u003c/code\u003e so I didn\u0026rsquo;t think a symmetrical name was appropriate. However, a signal pipeline has a start, middle and end:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003evalues are sent into the \u003ccode\u003eSignalInput\u003c/code\u003e at the start\u003c/li\u003e\n\u003cli\u003ethe middle is a series of \u003ccode\u003eSignal\u003c/code\u003e and transformation closures\u003c/li\u003e\n\u003cli\u003evalues are emitted at the end of the graph through\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026hellip;the \u003ccode\u003eSignalOutput\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRenaming \u003ccode\u003eCancellable\u003c/code\u003e to \u003ccode\u003eLifetime\u003c/code\u003e is a bit more experimental. In either case, the name is used for implementations of the \u003ca href=\"https://en.wikipedia.org/wiki/Dispose_pattern\"\u003eDispose pattern\u003c/a\u003e. I could call it \u003ccode\u003eDisposable\u003c/code\u003e, like C# and other libraries. However, to me, \u003ccode\u003eDisposable\u003c/code\u003e is too tightly associated with garbage collection and \u003ccode\u003eC#\u003c/code\u003e\u0026rsquo;s memory management, so I\u0026rsquo;d rather use a different name. The protocol requires just one function – \u003ccode\u003ecancel()\u003c/code\u003e – so the old \u003ccode\u003eCancellable\u003c/code\u003e name seemed appropriate. However, the protocol \u003cem\u003eimplies\u003c/em\u003e much more than the existence of the function. Most importantly, holding onto the instance preserves the \u003cem\u003elifetime\u003c/em\u003e of an ongoing asynchronous task, hence the name change. It is not without president in Swift since \u003ccode\u003ewithExtendedLifetime\u003c/code\u003e operates on the same \u0026ldquo;lifetime\u0026rdquo; premise for scoped values. Oh, and \u003ccode\u003eCancellable\u003c/code\u003e is really cumbersome to pronounce.\u003c/p\u003e\n\n\u003ch3 id=\"build-and-performance\"\u003eBuild and performance\u003c/h3\u003e\n\n\u003cp\u003eThe first release of CwlSignal included copies of Result, ExecutionContext and Cancellable in the same project. I\u0026rsquo;ve since moved these files into the CwlUtils framework. I think this more modular approach is cleaner, and better for most use cases but it is 30-50% \u003cem\u003eslower\u003c/em\u003e in narrow test cases that hammer the core \u0026ldquo;send\u0026rdquo; functions since Swift doesn\u0026rsquo;t inline between frameworks.\u003c/p\u003e\n\n\u003cp\u003eAs an alternative, to the default build arrangement, you can build the CwlSignalConcat target in the CwlSignal project, open the the build products directory and copy the contents of the \u0026ldquo;Concat_internal\u0026rdquo; folder (a CwlUtils.swift and CwlSignal.swift file) directly into your project. Since this approach places all the code directly in your project\u0026rsquo;s module, it is heavily inlined and up to 50% faster in some cases. Of course, this runtime performance comes at the cost of slower Release compilation speed.\u003c/p\u003e\n\n\u003ch2 id=\"cwlutils-debugcontextcoordinator\"\u003eCwlUtils.DebugContextCoordinator\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ca href=\"/blog/testing-actions-over-time.html\"\u003eTesting actions over time\u003c/a\u003e article contained variations on a \u003ccode\u003eTimeoutService\u003c/code\u003e that had fallen badly out-of-date. I\u0026rsquo;d been maintaining a version of this code in the CwlSignal playground but I had never propagated these changes back to the original.\u003c/p\u003e\n\n\u003cp\u003eI rewrote the core example and then a lot of the article required minor text changes to reflect the updated code.\u003c/p\u003e\n\n\u003ch2 id=\"cwlutils-deque\"\u003eCwlUtils.Deque\u003c/h2\u003e\n\n\u003cp\u003eIn my article \u003ca href=\"/blog/2016/09/22/deque.html\"\u003eOptimizing a copy-on-write double-ended queue in Swift\u003c/a\u003e, I looked at trying to optimize a collection using \u003ccode\u003eManagedBuffer\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll of the timing values had changed in this article. I reran them. I also checked to see if Swift had fixed the annoying closure capture that forced an ugly work around for performance reasons (no, it hasn\u0026rsquo;t).\u003c/p\u003e\n\n\u003ch2 id=\"cwlwhitespacepolicing\"\u003eCwlWhitespacePolicing\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"/blog/2016/06/25/policing-whitespace.html\"\u003eUpdated the project for this article\u003c/a\u003e to Swift 4.2. The compiler pointed out a number of \u003ccode\u003eswitch\u003c/code\u003e cases that couldn\u0026rsquo;t be reached. Better diagnostics. Neat!\u003c/p\u003e\n\n\u003ch2 id=\"cwlutils-pthreadmutex\"\u003eCwlUtils.PThreadMutex\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;ve changed computers so \u003ca href=\"/blog/2016/06/02/threads-and-mutexes.html\"\u003eall the numbers have changed in this article\u003c/a\u003e but that\u0026rsquo;s not the only thing that has happened.\u003c/p\u003e\n\n\u003cp\u003eWhile everything runs 30-50% faster on my MacBookPro15,1 versus my old MacPro4,1 – the \u003ccode\u003eDispatchQueue.sync\u003c/code\u003e performance has gotten 5% \u003cem\u003eworse\u003c/em\u003e. I don\u0026rsquo;t know why but I guess it is due to additional priority handling (which none of the other mutexes handle).\u003c/p\u003e\n\n\u003cp\u003eThe article includes a number of different variants (sync_2, sync_3, sync_4) that pass parameters to the mutex in different ways, trying to avoid closure capture. In the original article, these parameter passing variants were slightly slower as passing parameters incurred reference counting overheads. In Swift 4.2, all of these overheads appear to be gone. Somewhere between Swift 3 and Swift 4.2, reference type parameter overheads have \u003cem\u003evastly\u003c/em\u003e decreased as the compiler is able to avoid reference counting in more cases.\u003c/p\u003e\n\n\u003ch2 id=\"cwlutils-randomnumbergenerator\"\u003eCwlUtils.RandomNumberGenerator\u003c/h2\u003e\n\n\u003cp\u003eSince I originally wrote \u003ca href=\"/blog/2016/05/19/random-numbers.html\"\u003ethis article\u003c/a\u003e, Swift has incorporated its own \u003ccode\u003eRandomNumberGenerator\u003c/code\u003e protocol, rendering my very similar \u003ccode\u003eRandomGenerator\u003c/code\u003e unnecessary. So I\u0026rsquo;ve rewritten the article to omit discussion of the protocol itself.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve replaced the xoroshiro128 algorithm with the xoshiro256 algorithm since some potential issues with the former have been discovered.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve rerun all the performance tests. Most tests are 30-50% faster on my MacBookPro15,1 but curiously, the new \u003ccode\u003earc4random\u003c/code\u003e implementation, Swift\u0026rsquo;s \u003ccode\u003eSystemRandomNumberGenerator\u003c/code\u003e, is \u003cstrong\u003e4 times slower\u003c/strong\u003e. I don\u0026rsquo;t really know what\u0026rsquo;s going on there but I assume it\u0026rsquo;s due to a switch in the internal algorithm that happened in macOS Sierra.\u003c/p\u003e\n\n\u003ch2 id=\"cwldemangle\"\u003eCwlDemangle\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"/blog/2016/05/01/swift-name-demangling.html\"\u003eBrought the implementation for this article\u003c/a\u003e up to date with all the latest Swift 4.2 demangling test cases. There will definitely be more work as Swift 5 approaches and then this little library might finally see some stability.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve previously added a note to that article that the comparison between Swift and C++ involved the 2016 version of the Demangle.cpp file. Since then, the C++ version has slightly improved performance and started incorporating more C++11 syntax and less C macros (both significant changes for the better). I choose to believe that my criticism encouraged the refactoring – although, frankly, the old C++ \u003ccode\u003edemangleImplConvention\u003c/code\u003e function was bizarre enough and bug prone enough that it likely encouraged refactoring on its own.\u003c/p\u003e\n\n\u003ch2 id=\"cwlutils-sysctl\"\u003eCwlUtils.Sysctl\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;ve made a number of updates to \u003ca href=\"/blog/2016/03/08/swift-wrapper-for-sysctl.html\"\u003emy Sysctl wrapper\u003c/a\u003e over time. The original interface, while better than using \u003ccode\u003esysctl\u003c/code\u003e directly, was clunky if you had to use the raw data functions. The updated \u003ccode\u003edata(for:)\u003c/code\u003e and \u003ccode\u003estring(for:)\u003c/code\u003e functions are a lot nicer – although this is a breaking change.\u003c/p\u003e\n\n\u003cp\u003eI\u0026rsquo;ve also tidied up a few properties that were not truly available on iOS (even though they succeeded in the simulator).\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eScorecard:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e28 out of 39 Swift articles updated\u003c/li\u003e\n\u003cli\u003e1 article entirely rewritten\u003c/li\u003e\n\u003cli\u003e23 diagrams redrawn\u003c/li\u003e\n\u003cli\u003e11 different git repositories updated\u003c/li\u003e\n\u003cli\u003e2 articles were deprecated\u003c/li\u003e\n\u003cli\u003e1 article was obsoleted\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCode maintenance is a drag but with all this out of the way, maybe I\u0026rsquo;ll finally get some new development done. Maybe?\u003c/p\u003e\n",
            "date_published": "2018-10-09T21:16:19+11:00"
        }
        
        , {
            "title": "A Farewell to StreamToMe",
            "id": "https://www.cocoawithlove.com/blog/a-farewell-to-streamtome.html",
            "url": "https://www.cocoawithlove.com/blog/a-farewell-to-streamtome.html",
            "content_html": "\n\n\u003cp\u003eLast night, I removed my app StreamToMe from the iOS and Mac App Stores, after 9 years on sale. It\u0026rsquo;s a deeply sad experience for me – like I\u0026rsquo;ve lost a faithful pet – so I wanted to write a quick retrospective.\u003c/p\u003e\n\n\u003cp\u003eThis will be a discussion about what it\u0026rsquo;s like to have an app on the App Store that is financially successful but eternally problematic from a support and maintenance perspective. I\u0026rsquo;ll talk about why I lost interest in StreamToMe and, at times, deliberately neglected my own product. Finally, I\u0026rsquo;ll talk about why I\u0026rsquo;ve decided to simply pull it from the store – not open source it or sell it – even though it still works for many people.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePredicting the future is hard\u003c/strong\u003e: It\u0026rsquo;s been 8 months since my previous article when I said I would release CwlViews \u0026ldquo;in a few weeks\u0026rdquo;. I\u0026rsquo;ve been busy with other things and have barely touched CwlViews in that time. Oops. In more-organized news, the book I was writing with Chris Eidhof and Florian Kugler, \u003ca href=\"https://www.objc.io/books/app-architecture/\"\u003eApp Architecture in Swift\u003c/a\u003e, launched in May and you can \u003ca href=\"https://www.objc.io/books/app-architecture/\"\u003eget the finished book from objc.io\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"streamtome\"\u003eStreamToMe\u003c/h2\u003e\n\n\u003cp\u003eStreamToMe was a streaming music, video and photos app for iOS and macOS that I wrote and distributed via the respective App Stores.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/blog/streamtome_promo.jpg\" alt=\"Some StreamToMe promotional screenshots from the iOS 6 era. 'member Aperture?\" /\u003e\u003c/p\u003e\n\n\u003cfigcaption\u003eSome StreamToMe promotional screenshots from the iOS 6 era. 'member Aperture?\u003c/figcaption\u003e\n\n\u003cp\u003eStreamToMe relied on a lightweight streaming server, named ServeToMe, to stream media from the user\u0026rsquo;s computer to the device in Apple\u0026rsquo;s HTTP Live Streaming format over the local network or internet. The ServeToMe server performed live transcoding (conversion to the required format) or live remuxing (moving to the streaming container without transcoding) as needed, including bitrate changes to support variable network conditions.\u003c/p\u003e\n\n\u003cp\u003eStreamToMe + ServeToMe competed with AirVideo, Plex, AirMediaCenter and numerous others that also implement Apple\u0026rsquo;s HTTP Live Streaming for personal media streaming. StreamToMe had low overheads, low latency, highly robust seeking and support for weird formats and was better at music and photo handling than the more video-focussed players.\u003c/p\u003e\n\n\u003ch2 id=\"from-prototype-to-ipad\"\u003eFrom prototype to iPad\u003c/h2\u003e\n\n\u003cp\u003eI wrote the first version of StreamToMe in June 2009, shortly after Apple announced HTTP Live Streaming at WWDC. It took a week to write a prototype and about a month to prepare for release. The first version had no thumbnails, no playlists, no ability to seek within a file. Despite the lack of features, it sold a few copies – indicating a desire for something in its space – so I added the most obviously missing features in the next couple months and it sold more copies.\u003c/p\u003e\n\n\u003cp\u003eThen Apple announced the iPad. I didn\u0026rsquo;t own an iPad – nor did I have any intention of getting one – but I hastily updated StreamToMe to handle the iPad in the simulator, called it version 2.0 and \u003ca href=\"https://www.cocoawithlove.com/2010/04/streamtome-is-available-for-ipad.html\"\u003edefiantly announced day 1 availability on my blog\u003c/a\u003e. A few websites picked up my announcement and sales suddenly took off.\u003c/p\u003e\n\n\u003cp\u003eThe result was a blessing and a disaster.\u003c/p\u003e\n\n\u003cp\u003eBugs in my Bonjour handling for the iPad release meant that anyone on an IPv6 capable network couldn\u0026rsquo;t discover their server. A handful of other issues in my hasty release led to 2000 support emails in single day. I did nothing but fight fires for the next couple months.\u003c/p\u003e\n\n\u003cp\u003eDespite the bugs though, StreamToMe continued to sell.\u003c/p\u003e\n\n\u003ch2 id=\"trying-to-please-people-makes-things-worse\"\u003eTrying to please people makes things worse\u003c/h2\u003e\n\n\u003cp\u003eI fixed the bugs but now I had a different problem: customers, lots of them, all wanting features. If they all wanted the \u003cem\u003esame\u003c/em\u003e features, there might not be a problem but I quickly learned that media is a deeply personal experience and everyone wants to experience it a different way.\u003c/p\u003e\n\n\u003cp\u003eEver wondered why all the major media player are a weird kitchen-sink of features bolted onto each other? Media players are a product-space where everyone uses a tiny slice of the features but no two users use the same slice of features and the entire space is really, really broad.\u003c/p\u003e\n\n\u003cp\u003eOne user plays only TV shows. Another plays only movies. Another plays only lossless audio in continuous albums. Another plays only individual songs. Another plays only audiobooks. Another plays only content they\u0026rsquo;ve ripped for themselves. One of them stores all their files in a single folder. One of them stores every file in their own folder. One stores all the files in different folders but aliases in a single folder. One stores them over a number of NAS drives. One of them zips all media into archives and expects the media player to perform unzipping on-the-fly. One of them plays content from ISO format disc images. One of them uses an old media encoder that sets the wrong H.264 profile. One of them uses external subtitle files for each movie. One of them uses external thumbnail files for each song. One of them uses separate album artwork files in each folder. Most have a few files in formats you haven\u0026rsquo;t heard about in years. One of them uses AIFF files. One of them uses Real Media files. One of them uses WTV files.\u003c/p\u003e\n\n\u003cp\u003eThere is no \u0026ldquo;common\u0026rdquo; user. Analytics and data gathering look like random noise. You could probably spend an eternity adding features to a media player and a significant percentage of users would still feel left out because you\u0026rsquo;ve omitted \u003cem\u003etheir\u003c/em\u003e favorite feature.\u003c/p\u003e\n\n\u003cp\u003eLike an idiot, I scrambled to add as many features as I could. Unfortunately, I ended up with a huge swath of features that \u003cem\u003eI\u003c/em\u003e didn\u0026rsquo;t really use and the app stopped feeling like it properly catered to me. For something that started as a personal passion project, I was starting to feel like an dispassionate observer, rather than a passionate participant.\u003c/p\u003e\n\n\u003cp\u003eAnd as the feature set grew, so did a different class of maintenance problems and these were not simple bugs that could be fixed.\u003c/p\u003e\n\n\u003ch2 id=\"never-write-a-multi-faceted-integration-project\"\u003eNever write a multi-faceted integration project\u003c/h2\u003e\n\n\u003cp\u003eYou can fix bugs. You can write unit tests, regression tests and integration tests that run on your own equipment. But if your product is heavily reliant on integration with the \u003cem\u003euser\u0026rsquo;s\u003c/em\u003e environment then you\u0026rsquo;re in trouble.\u003c/p\u003e\n\n\u003cp\u003eStreaming media players are usually a fairly thin I/O, routing and scheduling layer between the following systems:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003euser\u0026rsquo;s media collection, including formats, encodings and folder hierarchies\u003c/li\u003e\n\u003cli\u003euser\u0026rsquo;s storage systems (NAS devices, external drives, internal storage)\u003c/li\u003e\n\u003cli\u003ea media transcoder (ServeToMe used a custom build of ffmpeg and Apple\u0026rsquo;s AVFoundation)\u003c/li\u003e\n\u003cli\u003eserver OS network services (HTTP server and network advertising)\u003c/li\u003e\n\u003cli\u003eserver network (including WiFi/internet router, UPnP-IGD, network topology)\u003c/li\u003e\n\u003cli\u003eclient network services (network provider, reachability, network discovery)\u003c/li\u003e\n\u003cli\u003eclient media player services (HLS, background audio, picture-in-picture)\u003c/li\u003e\n\u003cli\u003eclient network (possibly home WiFi, possibly cellular provider, possibly third-party WiFi)\u003c/li\u003e\n\u003cli\u003eclient ancillary services (Apple TVs, Chromecasts, smart TVs)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe streaming media player usually bundles the media transcoder (3) but has no control over the rest; they\u0026rsquo;re black boxes and when they don\u0026rsquo;t do what you expect, they often fail silently: no logs, no feedback; nothing. They all update regularly, are replaced by new devices regularly, are all subject to misconfiguration, are sometimes actively hostile towards personal media streaming, regularly have APIs that are complex enough to be impossible to fully support, and will all result in the user blaming the streaming media player if anything goes wrong.\u003c/p\u003e\n\n\u003cp\u003eEverything about home networking is a mess. There\u0026rsquo;s a vast set of reasons why two devices on the same home network cannot see each other (IP subnets, NAT, firewalls, VPN, blocked multicasts) and spending your days explaining this via email to purchasers of a $3 app is not rewarding at all.\u003c/p\u003e\n\n\u003cp\u003eThen there\u0026rsquo;s everything about Windows. For a longtime Mac user like me, everything about Windows feels like torture. Ever tried opening a socket connection on a Windows computer? Anti-virus software will intercept any socket connection that starts with \u0026ldquo;GET\u0026rdquo; and silently discard the traffic if they\u0026rsquo;re not happy. Have you ever tried to write a Windows installer for a Windows service? Writing the installer can literally double the development work for the overall project. Even once you get it working on a normal computer, you\u0026rsquo;ll get a handful of failed installs a week due to corrupted registries, broken .NET installations or mysterious security settings.\u003c/p\u003e\n\n\u003cp\u003eAnd the problem with larger integration projects is that every day, there are new components be added or removed from the environment of your users. Services you rely upon are updated and break your program. People acquire new kinds of devices and expect them to integrate. Maintaining integration with a perpetually changing set of environments across the iOS app, the macOS app, the macOS server and the Window server sapped the energy out of me. I \u003cem\u003ewanted\u003c/em\u003e StreamToMe to fade away so the support effort would fade.\u003c/p\u003e\n\n\u003ch3 id=\"special-mention-interfering-network-providers\"\u003eSpecial mention: interfering network providers\u003c/h3\u003e\n\n\u003cp\u003eSince October last year, T-Mobile have intercepted every attempted StreamToMe audio stream and blocked the connection. Why? I suspect they\u0026rsquo;re trying to apply bitrate shaping to reduce the bitrate of traffic but they are making incorrect assumptions about the nature of StreamToMe leading to total packet loss. The effect is that I get a constant stream of customers complaining that StreamToMe doesn\u0026rsquo;t work and I need to unravel the fact that the underlying complaint is \u0026ldquo;won\u0026rsquo;t stream over T-Mobile\u0026rsquo;s network\u0026rdquo;. T-Mobile claimed that StreamToMe doesn\u0026rsquo;t support IPv6 which is a puzzling expectation for connections that are nearly always IPv4 and I wasted a couple weeks with some of my customers trialling different IPv6 improvements to the app and server without success. In any case, it\u0026rsquo;s infuriating that a network on the opposite side of the world to me expects me to alter my app to support their specific approach to interfering with customer network traffic.\u003c/p\u003e\n\n\u003cp\u003eI would route all traffic over HTTPS to prevent network interference but that\u0026rsquo;s just a different game that is rigged against home servers like ServeToMe. Apple\u0026rsquo;s HTTP live streaming won\u0026rsquo;t accept peer certificates (home servers can\u0026rsquo;t use typical certificate validation) and running a client side proxy to tunnel over TLS causes a huge number of problems on iOS for background apps since all your network listen sockets break during backgrounding.\u003c/p\u003e\n\n\u003ch2 id=\"fading-away\"\u003eFading away\u003c/h2\u003e\n\n\u003cp\u003eAt StreamToMe\u0026rsquo;s peak, it sold nearly 10,000 units per month. It was never free or priced on the bottom couple tiers so it was making good money for a single-developer app with low overheads.\u003c/p\u003e\n\n\u003cp\u003eThe following graph shows StreamToMe\u0026rsquo;s lifetime unit sales. Most of the peaks coincide with the sales of new iOS devices. The three most dramatic upticks are the release of the original iPad, the Apple TV 2 and the iPad 2 but you can also see Apple\u0026rsquo;s yearly iOS update cycle in the tail.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/blog/streamtome_units.png\" alt=\"StreamToMe units sold per month, over its lifetime\" /\u003e\u003c/p\u003e\n\n\u003cfigcaption\u003eStreamToMe units sold per month, over its lifetime\u003c/figcaption\u003e\n\n\u003cp\u003eThe good sales I had between 2010 and 2013 were significantly helped by a flurry of new devices. These spikes of additional sales are dependent on being ready when new product categories appear. There would certainly have been another bump in 2015 had I actually released a tvOS version of StreamToMe for the Apple TV 4 but I was busy making excuses for why I couldn\u0026rsquo;t do that.\u003c/p\u003e\n\n\u003ch2 id=\"denial\"\u003eDenial\u003c/h2\u003e\n\n\u003cp\u003eFor years, I\u0026rsquo;ve been telling myself that I would put out a new version that added long-promised features. That I would finally put out a tvOS version. That I would finally overhaul the clunky interface. That I would update to Swift.\u003c/p\u003e\n\n\u003cp\u003eI told myself that the sales would recover and StreamToMe would feel like a new app again.\u003c/p\u003e\n\n\u003cp\u003eI told myself that these updates were waiting until I had the free time.\u003c/p\u003e\n\n\u003cp\u003eBut then I had the time available and I worked on anything else except StreamToMe. Given free time, I wanted to work on personal projects that excited me. StreamToMe was difficult and grueling, not just because it was a nightmare of support and integration but also because it had ceased to be a personal project.\u003c/p\u003e\n\n\u003ch2 id=\"media-landscape-changes\"\u003eMedia landscape changes\u003c/h2\u003e\n\n\u003cp\u003eIn 2009, my media consumption flow went like this:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eBuy DVDs and CDs\u003c/li\u003e\n\u003cli\u003eExtract them to my computer\u003c/li\u003e\n\u003cli\u003eStream them to myself using StreamToMe\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI used StreamToMe in this way every day. Recently though, I haven\u0026rsquo;t used it in months.\u003c/p\u003e\n\n\u003cp\u003eI haven\u0026rsquo;t bought a physical CD or DVD in years. Netflix, Hulu, Amazon Prime, Twitch, YouTube and Apple Music have changed where media is stored but almost as big is the fact that the surge in content creation and distribution has completely changed the breadth of available media. With the scarcity equation shifted, I don\u0026rsquo;t find myself returning to previous purchases that I thought I would enjoy forever.\u003c/p\u003e\n\n\u003cp\u003eI don\u0026rsquo;t watch my own DVDs and BluRays. In a couple years, I might not even own a physical media player. I listen to my music less. I\u0026rsquo;ve stopped watching TV and stopped listening to the radio.\u003c/p\u003e\n\n\u003cp\u003eWhile many consumers haven\u0026rsquo;t changed as dramatically as I have, even if StreamToMe was updated and feature-rich, I don\u0026rsquo;t think the market for StreamToMe is anywhere near what it was 10 years ago.\u003c/p\u003e\n\n\u003ch2 id=\"taking-it-down\"\u003eTaking it down\u003c/h2\u003e\n\n\u003cp\u003e100-200 units sold per month over the last year was enough to justify working on it one day per month but StreamToMe invariably took 2 or 3 days of my time each month. It wasn\u0026rsquo;t exactly a loss-making in raw terms but as an opportunity cost, I could do better things with my time.\u003c/p\u003e\n\n\u003cp\u003eA deciding factor ended up being problems with the ServeToMe server on Windows. ServeToMe depended upon iTunes on Windows for a number of services and iTunes\u0026rsquo; recent move to the Window Store broke these dependencies and hence broke StreamToMe for roughly a third of my customers.\u003c/p\u003e\n\n\u003cp\u003eDependencies are replaceable and I could spend a week or two replacing them but I don\u0026rsquo;t want to devote the time. I could official withdraw support for Windows from the app but I know from experience that it would be replaced by continual questions about whether there was a Windows server available. And even if I did all that, it still wouldn\u0026rsquo;t address the hundreds of other minor unfixed issues, as well as major ones like cellular carrier interference. And beyond the bugs, the app still looks dated, still contains code written during the iPhone OS 2 era and still has never been updated to ARC, much less autolayout or a thousand other iOS improvements. The server is much newer after a major rewrite in 2013 but is written in C++11 – a language I haven\u0026rsquo;t used for any new projects in the last 5 years – so it\u0026rsquo;s just another project that feels like I\u0026rsquo;m no longer personally involved.\u003c/p\u003e\n\n\u003cp\u003eAccording to App Store analytics, there are over 30,000 active users of StreamToMe for whom these issues are not deal-breakers (that represents roughly 10% of the customers who have ever bought the app). The app itself will continue to work for these people, even though I\u0026rsquo;ve taken it off the App Store – with luck, it will continue to work for years to come.\u003c/p\u003e\n\n\u003cp\u003e30,000 is a non-trivial base of active users but I don\u0026rsquo;t think it would be easy for anyone to adopt StreamToMe and grow that base. The code, the features and everything else about the app is just a mess.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eI\u0026rsquo;ve spent a lot of this article complaining about StreamToMe but the truth is that I\u0026rsquo;m really sad to take it off of the App Store. I continued to maintain it this long because I\u0026rsquo;m emotionally attached to it. StreamToMe remains the only successful product that I\u0026rsquo;ve launched entirely on my own. For around 4 years, it was my primary source of income.\u003c/p\u003e\n\n\u003cp\u003eStreamToMe would certainly be more successful right now if I had maintained it passionately but it took me a long time to realize that I lost interest in it. Regardless of my stewardship, I think the market has changed and I think the overall downward trend would be the same in any case. People are no longer buying their first iPad and looking to buy hundreds of apps for it in a flurry of excitement. Media consumption habits have changed. My habits have changed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eStreamToMe users\u003c/strong\u003e: Even though it\u0026rsquo;s removed from sale, previous purchasers of StreamToMe can still redownload the latest StreamToMe 3.18 from the Purchases screen in the App Store app. \u003ca href=\"https://zqueue.com/servetome/\"\u003eServeToMe is still available\u003c/a\u003e from its webpage. The StreamToMe app is tested and fully functional on iOS 12.\u003c/p\u003e\n\u003c/blockquote\u003e\n",
            "date_published": "2018-09-04T19:34:23+10:00"
        }
        
    ]
}
